{"version":3,"sources":["viz.ts"],"names":[],"mappings":"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","file":"viz.js","sourcesContent":["import * as d3 from 'd3';\n\nconst OUT_LEFT = 1, OUT_TOP = 2, OUT_RIGHT = 4, OUT_BOTTOM = 8;\nconst MAX_NODE_NAME_LENGTH = 15;\nconst MAX_VALUE_LENGTH = 5;\nconst MAX_PCT_VALUE = 6;\nconst DEFAULT_PADDING = '\\u00A0';\n\nexport class VGraph {\n  nodes: Map<number, VNode>;\n  edges: Map<number, VEdge>;\n  \n  constructor() {\n    this.nodes = new Map<number, VNode>();\n    this.edges = new Map<number, VEdge>();\n  }\n  \n  public getNodes(): VNode[] {\n    return Array.from(this.nodes.values());\n  }\n  \n  public getEdges(): VEdge[] {\n    return Array.from(this.edges.values());\n  }\n  \n  public addNode(node: VNode): VGraph {\n    this.nodes.set(node.id, node);\n    return this;\n  }\n  \n  public addEdge(edge: VEdge): VGraph {\n    this.edges.set(edge.getId(), edge);\n    return this;\n  }\n  \n  public getNode(id: number): VNode {\n    return this.nodes.get(id);\n  }\n  \n  public getPath(id1: number, id2: number): VPath {\n    return this.getNode(id1).getPath(this.getNode(id2));\n  }\n}\n\nexport class VEdge {\n  public points: VPoint[];\n  \n  constructor(public parent: VNode, public child: VNode) {\n    this.points = [];\n  }\n  \n  public getId(): number {\n    return Util.hashOfStr(this.toString());\n  }\n  \n  public toString(): string {\n    return this.parent.label + '->' + this.child.label;\n  }\n}\n\nexport class VNode {\n  public width = 150;\n  public height: number;\n  public point: VPoint;\n  \n  constructor(public id: number, public label: string, public values: string[], public probs: number[]) {\n    this.probs = this.normalizeProbs(this.probs);\n    this.height = values.length * 15 + 20;\n    this.point = new VPoint(Math.random(), Math.random());\n  }\n  \n  public updatePoint(point: VPoint): void {\n    this.point.x = point.x;\n    this.point.y = point.y;\n  }\n  \n  public getRefId(): string {\n    return this.label;\n  }\n  \n  public getTranslation(): string {\n    return 'translate(' + this.point.x + ',' + this.point.y + ')';\n  }\n  \n  public getMid(): VPoint {\n    let dx = this.width / 2.0 + this.point.x;\n    let dy = this.height / 2.0 + this.point.y;\n    return new VPoint(dx, dy);\n  }\n  \n  public normalizeProbs(probs: number[]): number[] {\n    let sum = probs.reduce((a, b) => a + b);\n    return probs.map(p => p / sum);\n  }\n  \n  public getPath(that: VNode): VPath {\n    let theta = that.point.getTheta(this.point);\n    let p1 = this.getPoint(theta);\n    let p2 = that.getPoint(theta + Math.PI);\n    let error = p1.error || p2.error ? true : false;\n    \n    let path = new VPath(p1, p2);\n    path.error = error;\n    \n    return path;\n  }\n  \n  public toString(): string {\n    return this.id + '|' +\n      this.label + '|' +\n      this.values.join(',') + '|' +\n      this.probs.join(',') + '|' +\n      this.point.toString();\n  }\n  \n  private getPoint(theta: number): VPoint {\n    let c = this.getMid();\n    let cx = c.x;\n    let cy = c.y;\n    let w = this.width / 2.0;\n    let h = this.height / 2.0;\n    let d = this.getDistance(new VPoint(cx, cy), new VPoint(cx + w, cy + h));\n    let x = cx + d * Math.cos(theta);\n    let y = cy + d * Math.sin(theta);\n    let ocode = this.getOutCode(new VPoint(x, y));\n    \n    let px = 0;\n    let py = 0;\n    let error = false;\n    \n    switch (ocode) {\n      case OUT_TOP:\n        px = cx - h * ((x - cx) / (y - cy));\n        py = cy - h;\n        break;\n      case OUT_LEFT:\n        px = cx - w;\n        py = cy - w * ((y - cy) / (x - cx));\n        break;\n      case OUT_BOTTOM:\n        px = cx + h * ((x - cx) / (y - cy));\n        py = cy + h;\n        break;\n      case OUT_RIGHT:\n        px = cx + w;\n        py = cy + w * ((y - cy) / (x - cx));\n        break;\n      default:\n        error = true;\n    }\n    \n    let p = new VPoint(px, py);\n    p.error = error;\n    return p;\n  }\n  \n  private getDistance(p1: VPoint, p2: VPoint): number {\n    let x = p1.x - p2.x;\n    let y = p1.y - p2.y;\n    let d = Math.sqrt((x * x) + (y * y));\n    return d;\n  }\n  \n  private getOutCode(point: VPoint): number {\n    let out = 0;\n    \n    if (this.width <= 0) {\n      out |= OUT_LEFT | OUT_RIGHT;\n    } else if (point.x < this.point.x) {\n      out |= OUT_LEFT;\n    } else if (point.x > this.point.x + this.width) {\n      out |= OUT_RIGHT;\n    }\n    \n    if (this.height <= 0) {\n      out |= OUT_TOP | OUT_BOTTOM;\n    } else if (point.y < this.point.y) {\n      out |= OUT_TOP;\n    } else if (point.y > this.point.y + this.height) {\n      out |= OUT_BOTTOM;\n    }\n    \n    return out;\n  }\n}\n\nexport class VPoint {\n  public error = false;\n  \n  constructor(public x: number, public y: number) {\n  \n  }\n  \n  public toString(): string {\n    return '(' + this.x + ',' + this.y + ')';\n  }\n  \n  public getTheta(that: VPoint): number {\n    return Math.atan2(this.y - that.y, this.x - that.x);\n  }\n}\n\nexport class VPath {\n  public error = false;\n  \n  constructor(public p1: VPoint, public p2: VPoint) {\n  \n  }\n  \n  public toString(): string {\n    return this.p1.toString() + ' to ' + this.p2.toString();\n  }\n}\n\nexport class Util {\n  static hashOfStr(s: string): number {\n    let hash = 0;\n    if (s.length === 0) {\n      return hash;\n    }\n    \n    for (let i = 0, len = s.length; i < len; i++) {\n      let chr = s.charCodeAt(i);\n      hash = ((hash << 5) - hash) + chr;\n      hash |= 0; // Convert to 32bit integer\n    }\n    return hash;\n  }\n  \n  static hashOfArr(arr: string[]): number {\n    return this.hashOfStr(arr.sort().join('-'));\n  }\n}\n\nexport interface InferenceEngine {\n  getGraph(): VGraph;\n  \n  updateEvidence(id: number, value: string): void;\n  \n  getProbs(id: number): number[];\n}\n\nexport class NoOpInferenceEngine implements InferenceEngine {\n  constructor(public graph: VGraph) {\n  \n  }\n  \n  public getGraph(): VGraph {\n    return this.graph;\n  }\n  \n  public updateEvidence(id: number, value: string): void {\n  \n  }\n  \n  public getProbs(id: number): number[] {\n    return this.graph.getNode(id).probs;\n  }\n}\n\nexport class RenderOptions {\n  constructor(public id: string, public width: number, public height: number) {\n  \n  }\n}\n\nexport class GraphRenderer {\n  graph: VGraph;\n  \n  constructor(public engine: InferenceEngine, public options: RenderOptions) {\n    this.graph = this.engine.getGraph();\n  }\n  \n  public draw(): void {\n    this.initSvg();\n    this.layoutGraph();\n    this.drawEdges();\n    this.drawNodes();\n  }\n  \n  private initSvg(): void {\n    d3.select(this.options.id)\n      .attr({\n        width: this.options.width,\n        height: this.options.height\n      })\n      .append('defs')\n      .append('marker')\n      .attr({\n        id: 'arrow',\n        markerWidth: 10,\n        markerHeight: 10,\n        refX: 5,\n        refY: 3,\n        orient: 'auto',\n        markerUnits: 'strokeWidth'\n      })\n      .append('path')\n      .attr({\n        d: 'M0,0 L0,6, L5,3 z',\n        fill: '#f00',\n        class: 'edge-head'\n      });\n  }\n  \n  private getDagreGraph(): Dagre.Graph {\n    let g = new dagre.graphlib.Graph();\n    g.setGraph({});\n    g.setDefaultEdgeLabel(() => {\n      return {};\n    });\n    \n    this.graph.getNodes()\n      .forEach(n => {\n        g.setNode(n.getRefId(), {\n          label: n.getRefId(),\n          width: n.width,\n          height: n.height\n        });\n      });\n    \n    this.graph.getEdges()\n      .forEach(e => {\n        g.setEdge(e.parent.getRefId(), e.child.getRefId());\n      });\n    \n    return g;\n  }\n  \n  private layoutGraph(): void {\n    let g = this.getDagreGraph();\n    dagre.layout(g);\n    \n    this.graph.getNodes()\n      .forEach(n => {\n        let dagreNode = g.node(n.getRefId());\n        \n        if (dagreNode) {\n          n.updatePoint(new VPoint(dagreNode.x, dagreNode.y));\n        }\n      });\n    \n    this.graph.getEdges()\n      .forEach(e => {\n        let dagreEdge = g.edge({v: e.parent.getRefId(), w: e.child.getRefId()});\n        if (dagreEdge) {\n          e.points = Array.from(dagreEdge.points)\n            .map(point => {\n              let p = point as any;\n              return new VPoint(p.x, p.y);\n            });\n        }\n      });\n  }\n  \n  private drawEdges(): void {\n    let graph = this.graph;\n    let edges = d3.select(this.options.id)\n      .selectAll('line')\n      .data(graph.getEdges())\n      .enter()\n      .append('line')\n      .each(function (d) {\n        let path = graph.getPath(d.parent.id, d.child.id);\n        d3.select(this).attr({\n          'data-parent': d.parent.getRefId(),\n          'data-child': d.child.getRefId(),\n          x1: path.p1.x,\n          y1: path.p1.y,\n          x2: path.p2.x,\n          y2: path.p2.y,\n          style: 'stroke:rgb(255,0,0);stroke-width:2',\n          class: 'edge-line',\n          'marker-end': 'url(#arrow)'\n        });\n      })\n  }\n  \n  private drawNodes(): void {\n    let engine = this.engine;\n    let graph = this.graph;\n    let formatNodeName = this.formatNodeName;\n    let formatPct = this.formatPct;\n    let formatValue = this.formatValue;\n    let leftPad = this.leftPad;\n    let rightPad = this.rightPad;\n    \n    // set the node group\n    let nodes = d3.select(this.options.id)\n      .selectAll('g')\n      .data(graph.getNodes())\n      .enter()\n      .append('g')\n      .attr({\n        id: function (d) {\n          return d.getRefId()\n        },\n        transform: function (d) {\n          return d.getTranslation();\n        },\n        class: 'node-group'\n      })\n      .on('mousedown', function (d) {\n        d3.selectAll('g.node-group').sort((a, b) => {\n          if (a.id !== d.id) {\n            return -1;\n          } else {\n            return 1;\n          }\n        });\n      });\n    \n    // draw the node rectangle\n    nodes.append('rect')\n      .attr({\n        x: 0,\n        y: 0,\n        class: 'node-shape',\n        style: 'stroke:#000000; fill:none;',\n        width: function (d) {\n          return d.width;\n        },\n        height: function (d) {\n          return d.height;\n        },\n        'pointer-events': 'visible',\n        'data-node': function (d) {\n          return d.getRefId();\n        }\n      });\n    \n    // draw the node's name/label\n    nodes.append('text')\n      .attr({\n        x: function (d) {\n          return d.width / 2;\n        },\n        y: 15,\n        fill: 'black',\n        class: 'node-name',\n        'font-family': 'monospace',\n        'font-size': 15\n      })\n      .text(function (d) {\n        return formatNodeName(d.label);\n      })\n      .style('text-anchor', 'middle');\n    \n    // draw the node's value labels\n    nodes.each(function (d) {\n      let y = 30;\n      d.values.forEach(value => {\n        d3.select(this)\n          .append('text')\n          .attr({\n            x: 2,\n            y: y,\n            class: 'node-value',\n            'font-family': 'monospace',\n            'data-node': function (d) {\n              return d.getRefId();\n            },\n            'data-value': function (d) {\n              return value;\n            }\n          })\n          .on('click', function (e) {\n            let node = e as VNode;\n            let h = this;\n            let v = h.attributes['data-value'].value;\n            \n            engine.updateEvidence(node.id, v);\n            graph.getNodes().forEach(node => node.probs = engine.getProbs(node.id));\n            \n            graph.getNodes().forEach(node => {\n              node.values.forEach((value, j) => {\n                // update belief bars\n                let selector = 'rect[data-node=\"' + node.getRefId() + '\"][data-value=\"' + value + '\"]';\n                d3.select(selector).attr({width: node.probs[j] * 100});\n                \n                // update probability texts\n                selector = 'text[data-node=\"' + node.getRefId() + '\"][data-pvalue=\"' + value + '\"]';\n                d3.select(selector).text(formatPct(node.probs[j], leftPad));\n              });\n            });\n          })\n          .text(function (d) {\n            return formatValue(value, leftPad);\n          });\n        y += 15;\n      });\n    });\n    \n    // draw the node's percentage text\n    nodes.each(function (d) {\n      let y = 30;\n      for (let i = 0; i < d.probs.length; i++) {\n        d3.select(this)\n          .append('text')\n          .attr({\n            x: 2 + d.width,\n            y: y,\n            'font-family': 'monospace',\n            class: 'node-pct',\n            'data-node': function (d) {\n              return d.getRefId();\n            },\n            'data-pvalue': function (d) {\n              return d.values[i];\n            }\n          })\n          .text(function (d) {\n            return formatPct(d.probs[i], leftPad);\n          });\n        y += 15;\n      }\n    });\n    \n    \n    // draw the node's belief bars\n    nodes.each(function (d) {\n      let y = 20;\n      d.probs.forEach((prob, index) => {\n        d3.select(this)\n          .append('rect')\n          .attr({\n            x: 50,\n            y: y,\n            width: prob * 100,\n            height: 10,\n            class: 'node-bar',\n            'data-node': function (d) {\n              return d.getRefId();\n            },\n            'data-value': function (d) {\n              return d.values[index];\n            }\n          });\n        y += 15;\n      });\n    });\n    \n    // draw the node's interquartile lines\n    nodes.each(function (d) {\n      let y1 = 20;\n      let y2 = d.height - 5;\n      let width = d.width - 50;\n      let xInc = width / 4.0;\n      let x = 50 + xInc;\n      \n      for (let i = 0; i < 3; i++) {\n        d3.select(this)\n          .append('line')\n          .attr({\n            x1: x,\n            y1: y1,\n            x2: x,\n            y2: y2,\n            class: 'node-iqline',\n            'stroke-dasharray': '5, 1',\n            style: 'stroke:black; stroke-width:1px',\n          });\n        x += xInc;\n      }\n    });\n    \n    // set the dragging behavior\n    let drag = d3.behavior.drag()\n      .origin((d, i) => {\n        let node = d as VNode;\n        return node.point;\n      })\n      .on('dragstart', (d, i) => {\n        let e = d3.event as d3.BaseEvent;\n        e.sourceEvent.stopPropagation();\n      })\n      .on('drag', (d, i) => {\n        let event = d3.event as any;\n        let d3Event = d3.event as d3.BaseEvent;\n        let mouseEvent = d3Event.sourceEvent as MouseEvent;\n        let node = d as VNode;\n        \n        node.point.x = event.x;\n        node.point.y = event.y;\n        \n        let id = 'g#' + node.getRefId();\n        d3.select(id).attr({\n          transform: node.getTranslation()\n        });\n        \n        let arcs = 'line[data-parent=' + node.getRefId() + ']';\n        d3.selectAll(arcs)\n          .each(function (d) {\n            let edge = d as VEdge;\n            let path = graph.getPath(edge.parent.id, edge.child.id);\n            d3.select(this).attr({\n              x1: path.p1.x,\n              y1: path.p1.y,\n              x2: path.p2.x,\n              y2: path.p2.y\n            });\n          });\n        \n        arcs = 'line[data-child=' + node.getRefId() + ']';\n        d3.selectAll(arcs)\n          .each(function (d) {\n            let edge = d as VEdge;\n            let path = graph.getPath(edge.parent.id, edge.child.id);\n            d3.select(this).attr({\n              x1: path.p1.x,\n              y1: path.p1.y,\n              x2: path.p2.x,\n              y2: path.p2.y\n            });\n          });\n      });\n    nodes.call(drag);\n  }\n  \n  private leftPad(pad: string, threhold: number, str: string): string {\n    let ostr = str;\n    if (ostr.length < threhold) {\n      while (ostr.length < threhold) {\n        ostr = pad + ostr;\n      }\n      return ostr;\n    }\n    return ostr;\n  }\n  \n  private rightPad(pad: string, threhold: number, str: string): string {\n    let ostr = str;\n    if (ostr.length < threhold) {\n      while (ostr.length < threhold) {\n        ostr += pad;\n      }\n      return ostr;\n    }\n    return ostr;\n  }\n  \n  private formatNodeName(v: string) {\n    return v.length > MAX_NODE_NAME_LENGTH ? v.substr(0, MAX_NODE_NAME_LENGTH) : v;\n  }\n  \n  private formatValue(v: string, padding: (pad: string, threshold: number, str: string) => string) {\n    let value = v.length > MAX_VALUE_LENGTH ? v.substr(0, MAX_VALUE_LENGTH) : v;\n    return padding(DEFAULT_PADDING, MAX_VALUE_LENGTH, value);\n  }\n  \n  private formatPct(p: number, padding: (pad: string, threshold: number, str: string) => string): string {\n    return padding(DEFAULT_PADDING, MAX_PCT_VALUE, (p * 100).toFixed(2));\n  }\n}"]}