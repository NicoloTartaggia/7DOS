{"version":3,"sources":["pptc.ts"],"names":[],"mappings":"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","file":"pptc.js","sourcesContent":["import {\n  Bbn,\n  BbnNode,\n  BEdge,\n  BNode,\n  Clique,\n  CompareUtil,\n  Dag,\n  JoinTree,\n  JoinTreeListener,\n  JtEdge,\n  PotentialUtil,\n  SepSet,\n  Ug\n} from './graph';\n\nexport class InferenceController implements JoinTreeListener {\n  public static apply(bbn: Bbn): JoinTree {\n    PotentialInitializer.init(bbn);\n    \n    let ug = Moralizer.moralize(bbn);\n    let cliques = Triangulator.triangulate(ug);\n    let joinTree = Transformer.transform(cliques);\n    \n    Initializer.initialize(joinTree);\n    Propagator.propagate(joinTree);\n    \n    joinTree.setListener(new InferenceController());\n    \n    return joinTree;\n  }\n  \n  public evidenceRetracted(jointree: JoinTree) {\n    Initializer.initialize(jointree);\n    Propagator.propagate(jointree);\n  }\n  \n  public evidenceUpdated(jointree: JoinTree) {\n    Propagator.propagate(jointree);\n  }\n}\n\nexport class Initializer {\n  public static initialize(joinTree: JoinTree): JoinTree {\n    joinTree.getCliques().forEach(clique => {\n      let potential = PotentialUtil.getPotentialFromNodes(clique.nodes);\n      joinTree.addPotential(clique, potential);\n    });\n    \n    joinTree.getSepSets().forEach(sepSet => {\n      let potential = PotentialUtil.getPotentialFromNodes(sepSet.nodes);\n      joinTree.addPotential(sepSet, potential);\n    });\n    \n    joinTree.getBbnNodes().forEach(node => {\n      let clique = this.getClique(node, joinTree);\n      // console.log(node.variable.name + ' mapped to clique ' + clique.toString());\n      let p1 = joinTree.potentials.get(clique.id);\n      let p2 = node.potential;\n      // console.log(p1.toString());\n      // console.log('>>>>');\n      // console.log(p2.toString());\n      // console.log('----');\n      PotentialUtil.multiply(p1, p2);\n      // console.log(p1.toString());\n      // console.log('****');\n    });\n    \n    joinTree.getBbnNodes().forEach(node => {\n      node.variable.values.forEach(value => {\n        let clique = node.metadata.get('parent.clique') as Clique;\n        let cliquePotential = joinTree.potentials.get(clique.id);\n        let nodePotential = joinTree.getEvidence(node, value);\n        PotentialUtil.multiply(cliquePotential, nodePotential);\n        // console.log(clique.toString());\n        // console.log(cliquePotential.toString());\n      });\n    });\n    \n    return joinTree;\n  }\n  \n  private static getClique(node: BbnNode, jointree: JoinTree): Clique {\n    let clique: Clique;\n    \n    if (!node.metadata.has('parent.clique')) {\n      let cliques = jointree.findCliquesWithNodeAndParents(node.id)\n        .sort((a, b) => CompareUtil.intCompare(a.id, b.id));\n      clique = cliques[0];\n    } else {\n      clique = node.metadata.get('parent.clique') as Clique;\n    }\n    node.addMetadata('parent.clique', clique);\n    \n    return clique;\n  }\n}\n\nexport class Moralizer {\n  public static moralize(dag: Dag): Ug {\n    let ug = new Ug();\n    dag.getNodes().forEach(node => ug.addNode(node));\n    dag.getEdges().forEach(edge => ug.addEdge(new BEdge(edge.lhs, edge.rhs)));\n    dag.getNodes().forEach(node => {\n      let parents = Array.from(dag.getParents(node.id));\n      let size = parents.length;\n      for (let i = 0; i < size; i++) {\n        let pa1 = dag.getNode(parents[i]);\n        for (let j = i + 1; j < size; j++) {\n          let pa2 = dag.getNode(parents[j]);\n          ug.addEdge(new BEdge(pa1, pa2));\n        }\n      }\n    });\n    dag.getNodes().forEach(node => {\n      let parents = Array.from(dag.getParents(node.id)).map(id => dag.getNode(id));\n      node.addMetadata('parents', parents);\n    });\n    return ug;\n  }\n}\n\nexport class PotentialInitializer {\n  public static init(bbn: Bbn) {\n    bbn.getNodes().forEach(node => {\n      let bbnNode = node as BbnNode;\n      let parents = Array.from(bbn.getParents(node.id)).map(id => bbn.getNode(id) as BbnNode);\n      bbnNode.potential = PotentialUtil.getPotential(bbnNode, parents);\n    })\n  }\n}\n\nexport class Propagator {\n  public static propagate(joinTree: JoinTree): JoinTree {\n    let cliques = joinTree.getCliques().sort((a, b) => CompareUtil.intCompare(a.id, b.id));\n    let x = cliques[0];\n    // console.log(x.toString());\n    \n    joinTree.unmarkCliques();\n    this.collectEvidence(joinTree, x);\n    \n    joinTree.unmarkCliques();\n    this.distributeEvidence(joinTree, x);\n    \n    return joinTree;\n  }\n  \n  private static collectEvidence(jointree: JoinTree, start: Clique) {\n    let collector = new EvidenceCollector(jointree, start);\n    collector.start();\n  }\n  \n  private static distributeEvidence(jointree: JoinTree, start: Clique) {\n    let distributor = new EvidenceDistributor(jointree, start);\n    distributor.start();\n  }\n}\n\nexport class Transformer {\n  public static transform(cliques: Clique[]): JoinTree {\n    let jointree = new JoinTree();\n    cliques.forEach(c => jointree.addNode(c));\n    \n    let sepSets = this.getSepSets(cliques);\n    sepSets.forEach(s => jointree.addEdge(new JtEdge(s)));\n    \n    return jointree;\n  }\n  \n  private static getSepSets(cliques: Clique[]): SepSet[] {\n    let sepSets: SepSet[] = [];\n    let size = cliques.length;\n    for (let i = 0; i < size; i++) {\n      for (let j = i + 1; j < size; j++) {\n        const sepSet = new SepSet(cliques[i], cliques[j]);\n        if (!sepSet.isEmpty()) {\n          sepSets.push(sepSet);\n        }\n      }\n    }\n    return sepSets.sort((a, b) => {\n      let result = -1 * CompareUtil.intCompare(a.getMass(), b.getMass());\n      if (0 === result) {\n        result = CompareUtil.intCompare(a.getCost(), b.getCost());\n        if (0 === result) {\n          result = CompareUtil.intCompare(a.id, b.id);\n        }\n      }\n      return result;\n    })\n  }\n}\n\nexport class Triangulator {\n  public static triangulate(m: Ug): Clique[] {\n    let cliques: Clique[] = [];\n    let mm = this.duplicate(m);\n    while (mm.getNodes().length > 0) {\n      let nodeClique = this.selectNode(mm);\n      \n      let clique = new Clique(nodeClique.getBbnNodes());\n      \n      if (!this.isSubset(cliques, clique)) {\n        cliques.push(clique);\n      }\n      \n      mm.removeNode(nodeClique.node.id);\n      \n      nodeClique.edges.forEach(e => {\n        m.addEdge(e);\n        mm.addEdge(e);\n      })\n    }\n    return cliques;\n  }\n  \n  private static duplicate(g: Ug): Ug {\n    let ug = new Ug();\n    g.getNodes().forEach(n => ug.addNode(n));\n    g.getEdges().forEach(e => ug.addEdge(e));\n    return ug;\n  }\n  \n  private static selectNode(m: Ug): NodeClique {\n    let cliques = m.getNodes()\n      .map(node => {\n        let weight = this.getWeight(node, m);\n        let edges = this.getEdgesToAdd(node, m);\n        let neighbors = Array.from(m.getNeighbors(node.id)).map(id => m.getNode(id));\n        return new NodeClique(node, neighbors, weight, edges);\n      })\n      .sort((a, b) => {\n        let result = CompareUtil.intCompare(a.edges.length, b.edges.length);\n        if (0 === result) {\n          result = CompareUtil.intCompare(a.weight, b.weight);\n          if (0 === result) {\n            result = CompareUtil.intCompare(a.node.id, b.node.id);\n          }\n        }\n        return result;\n      });\n    return cliques[0];\n  }\n  \n  private static getWeight(n: BNode, m: Ug) {\n    let weight = (n as BbnNode).getWeight();\n    Array.from(m.getNeighbors(n.id))\n      .map(id => m.getNode(id))\n      .forEach(neighbor => weight *= (neighbor as BbnNode).getWeight());\n    return weight;\n  }\n  \n  private static getEdgesToAdd(n: BNode, m: Ug): BEdge[] {\n    let edges: BEdge[] = [];\n    let neighbors = Array.from(m.getNeighbors(n.id)).map(id => m.getNode(id));\n    let size = neighbors.length;\n    for (let i = 0; i < size; i++) {\n      let ne1 = neighbors[i];\n      for (let j = 0; j < size; j++) {\n        let ne2 = neighbors[j];\n        if (!m.edgeExists(ne1.id, ne2.id)) {\n          edges.push(new BEdge(ne1, ne2));\n        }\n      }\n    }\n    return edges;\n  }\n  \n  private static isSubset(cliques: Clique[], clique: Clique): boolean {\n    for (let i = 0; i < cliques.length; i++) {\n      if (cliques[i].isSuperset(clique)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\nclass NodeClique {\n  constructor(public node: BNode, public neighbors: BNode[], public weight: number, public edges: BEdge[]) {\n  \n  }\n  \n  getBbnNodes(): BbnNode[] {\n    let nodes = this.neighbors.slice(0);\n    nodes.push(this.node);\n    return nodes.map(n => (n as BbnNode));\n  }\n}\n\nexport class EvidenceCollector {\n  constructor(public joinTree: JoinTree, public startClique: Clique) {\n  \n  }\n  \n  public start() {\n    // console.log('STARTING EVIDENCE COLLECTION from ' + this.startClique.toString());\n    \n    this.startClique.mark();\n    this.joinTree.getNeighbors(this.startClique.id).forEach(sepSetId => {\n      let sepSet = this.joinTree.getNode(sepSetId) as SepSet;\n      Array.from(this.joinTree.getNeighbors(sepSetId))\n        .map(id => this.joinTree.getNode(id) as Clique)\n        .filter(clique => !clique.isMarked())\n        .forEach(y => {\n          this.walk(this.startClique, sepSet, y);\n        });\n    });\n  }\n  \n  private walk(x: Clique, s: SepSet, y: Clique) {\n    y.mark();\n    Array.from(this.joinTree.getNeighbors(y.id))\n      .map(id => this.joinTree.getNode(id) as SepSet)\n      .forEach(sepSet => {\n        Array.from(this.joinTree.getNeighbors(sepSet.id))\n          .map(id => this.joinTree.getNode(id) as Clique)\n          .filter(clique => !clique.isMarked())\n          .forEach(clique => this.walk(y, sepSet, clique));\n      });\n    PotentialUtil.passSingleMessage(this.joinTree, y, s, x);\n  }\n}\n\nexport class EvidenceDistributor {\n  constructor(public joinTree: JoinTree, public startClique: Clique) {\n  \n  }\n  \n  public start() {\n    // console.log('STARTING EVIDENCE DISTRIBUTION from ' + this.startClique.toString());\n    \n    this.startClique.mark();\n    this.joinTree.getNeighbors(this.startClique.id).forEach(sepSetId => {\n      let sepSet = this.joinTree.getNode(sepSetId) as SepSet;\n      Array.from(this.joinTree.getNeighbors(sepSetId))\n        .map(id => this.joinTree.getNode(id) as Clique)\n        .filter(clique => !clique.isMarked())\n        .forEach(y => {\n          PotentialUtil.passSingleMessage(this.joinTree, this.startClique, sepSet, y);\n          this.walk(this.startClique, sepSet, y);\n        });\n    });\n  }\n  \n  private walk(x: Clique, s: SepSet, y: Clique) {\n    y.mark();\n    Array.from(this.joinTree.getNeighbors(y.id))\n      .map(id => this.joinTree.getNode(id) as SepSet)\n      .forEach(sepSet => {\n        Array.from(this.joinTree.getNeighbors(sepSet.id))\n          .map(id => this.joinTree.getNode(id) as Clique)\n          .filter(clique => !clique.isMarked())\n          .forEach(clique => {\n            PotentialUtil.passSingleMessage(this.joinTree, y, sepSet, clique);\n            this.walk(y, sepSet, clique);\n          });\n      });\n  }\n}"]}