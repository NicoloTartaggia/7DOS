{"version":3,"sources":["graph.ts"],"names":[],"mappings":"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","file":"graph.js","sourcesContent":["export class Variable {\n  public values: string[];\n  \n  constructor(public id: number, public name: string, private _values: Set<string>) {\n    this.values = [..._values];\n  }\n}\n\nexport class BGraph {\n  protected nodes: Map<number, BNode>;\n  protected edges: Map<number, Set<number>>;\n  \n  constructor() {\n    this.nodes = new Map<number, BNode>();\n    this.edges = new Map<number, Set<number>>();\n  }\n  \n  public getNeighbors(id: number): Set<number> {\n    let keys = Array.from(this.edges.keys());\n    let neighbors1 = keys.filter(key => this.edges.get(key).has(id));\n    let neighbors2 = this.edges.has(id) ? Array.from(this.edges.get(id).values()) : [];\n    let neighbors = neighbors1.concat(neighbors2);\n    return new Set(neighbors);\n  }\n  \n  public getNode(id: number): BNode {\n    return this.nodes.get(id);\n  }\n  \n  public getNodes(): BNode[] {\n    return Array.from(this.nodes.keys()).map(id => this.nodes.get(id));\n  }\n  \n  public getEdges(): BEdge[] {\n    let keys: number[] = Array.from(this.edges.keys());\n    let stream = keys.map(lhsId => {\n      let edges = Array.from(this.edges.get(lhsId))\n        .map(rhsId => {\n          let edgeType = EdgeType.UNDIRECTED;\n          let leftId = lhsId;\n          let rightId = rhsId;\n          \n          if (!this.edges.get(rhsId).has(lhsId)) {\n            edgeType = EdgeType.DIRECTED;\n          } else {\n            leftId = Math.min(lhsId, rhsId);\n            rightId = leftId === lhsId ? rhsId : lhsId;\n          }\n          \n          return new BEdge(new BNode(leftId), new BNode(rightId), edgeType);\n        });\n      return edges;\n    });\n    \n    return this.removeDuplicates(this.flatten(stream));\n  }\n  \n  public addNode(node: BNode): BGraph {\n    if (!this.nodes.has(node.id)) {\n      this.nodes.set(node.id, node);\n    }\n    \n    if (!this.edges.has(node.id)) {\n      this.edges.set(node.id, new Set<number>());\n    }\n    return this;\n  }\n  \n  public addEdge(edge: BEdge): BGraph {\n    let lhs = edge.lhs;\n    let rhs = edge.rhs;\n    \n    this.addNode(lhs);\n    this.addNode(rhs);\n    \n    if (this.shouldAdd(edge)) {\n      let left = lhs.id;\n      let right = rhs.id;\n      \n      if (EdgeType.UNDIRECTED === edge.type) {\n        this.edges.get(left).add(right);\n        this.edges.get(right).add(left);\n      } else {\n        this.edges.get(left).add(right);\n      }\n    }\n    \n    return this;\n  }\n  \n  public edgeExists(id1: number, id2: number): boolean {\n    if (this.edges.has(id1) && this.edges.get(id1).has(id2)) {\n      return true;\n    }\n    if (this.edges.has(id2) && this.edges.get(id2).has(id1)) {\n      return true;\n    }\n    return false;\n  }\n  \n  public removeNode(id: number) {\n    this.nodes.delete(id);\n    this.edges.delete(id);\n    this.edges.forEach((v, k) => v.delete(id));\n  }\n  \n  protected shouldAdd(edge: BEdge): boolean {\n    let lhs = edge.lhs;\n    let rhs = edge.rhs;\n    \n    if (lhs.id === rhs.id) {\n      return false;\n    }\n    \n    if (!this.edges.get(lhs.id).has(rhs.id)) {\n      if (!this.edges.get(rhs.id).has(lhs.id)) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n  \n  private flatten(edges: BEdge[][]): BEdge[] {\n    let list: BEdge[] = [];\n    for (let i = 0; i < edges.length; i++) {\n      for (let j = 0; j < edges[i].length; j++) {\n        list.push(edges[i][j]);\n      }\n    }\n    return list;\n  }\n  \n  private removeDuplicates(edges: BEdge[]): BEdge[] {\n    let map = new Map<string, BEdge>();\n    let arr: BEdge[] = [];\n    \n    edges.forEach(e => {\n      let key = e.toString();\n      if (!map.has(key)) {\n        map.set(key, e);\n        arr.push(e);\n      }\n    });\n    \n    return arr;\n  }\n}\n\nexport class BNode {\n  metadata: Map<String, any>;\n  \n  constructor(public id: number) {\n    this.metadata = new Map<String, any>();\n  }\n  \n  public addMetadata(key: String, val: any): BNode {\n    this.metadata.set(key, val);\n    return this;\n  }\n}\n\nexport class BbnNode extends BNode {\n  probs: number[];\n  potential: Potential;\n  \n  constructor(public variable: Variable, probs: number[] = []) {\n    super(variable.id);\n    this.probs = probs;\n  }\n  \n  getWeight(): number {\n    return this.variable.values.length;\n  }\n  \n  public toString(): string {\n    let s = this.variable.name + ' {';\n    s += this.variable.values.join(',');\n    s += '}';\n    return s;\n  }\n}\n\nexport class Clique extends BNode {\n  private _marked = false;\n  \n  constructor(public nodes: BbnNode[]) {\n    super(IdUtil.hashOfArr(nodes.map(n => '' + n.id)));\n  }\n  \n  public isMarked(): boolean {\n    return this._marked;\n  }\n  \n  public mark() {\n    this._marked = true;\n  }\n  \n  public unmark() {\n    this._marked = false;\n  }\n  \n  public nodesMinus(nodes: BbnNode[]): BbnNode[] {\n    let ids = this.nodes.map(n => n.id);\n    return nodes.filter(n => ids.indexOf(n.id) === -1);\n  }\n  \n  public isSuperset(that: Clique): boolean {\n    let s1 = this.nodes.map(n => n.id);\n    let s2 = new Set(that.nodes.map(n => n.id));\n    let s3 = new Set(s1.filter(id => s2.has(id)));\n    \n    if (s2.size === s3.size) {\n      // console.log(this.toString() + ' is superset of ' + that.toString());\n      return true;\n    }\n    // console.log(this.toString() + ' is NOT superset of ' + that.toString());\n    return false;\n  }\n  \n  public getWeight(): number {\n    let weight = 1;\n    this.nodes.forEach(n => {\n      weight = weight * n.getWeight();\n    });\n    return weight;\n  }\n  \n  public contains(id: number): boolean {\n    let result = this.nodes.find(n => n.id === id);\n    if (result) {\n      return true;\n    }\n    return false;\n  }\n  \n  public getSepSet(that: Clique): SepSet {\n    return new SepSet(this, that);\n  }\n  \n  public toString(): string {\n    return '(' +\n      this.nodes\n        .map(n => n.variable.name)\n        .sort((a, b) => CompareUtil.strCompare(a, b))\n        .join('-') +\n      ')';\n  }\n}\n\nexport class SepSet extends Clique {\n  constructor(public left: Clique, public right: Clique) {\n    super([]);\n    \n    let set2 = new Set(left.nodes.map(n => n.id));\n    let set1 = new Set(right.nodes.filter(n => set2.has(n.id)).map(n => n.id));\n    this.nodes = left.nodes.filter(n => set1.has(n.id));\n    this.id = IdUtil.hashOfArr(this.nodes.map(n => '' + n.id));\n  }\n  \n  public isEmpty(): boolean {\n    return (this.nodes.length == 0) ? true : false;\n  }\n  \n  public getCost(): number {\n    return this.left.getWeight() + this.right.getWeight();\n  }\n  \n  public getMass(): number {\n    return this.nodes.length;\n  }\n  \n  public toString(): string {\n    return '[' +\n      this.nodes\n        .map(n => n.variable.name)\n        .sort((a, b) => CompareUtil.strCompare(a, b))\n        .join('-') +\n      ']';\n  }\n}\n\nexport class BEdge {\n  constructor(public lhs: BNode, public rhs: BNode, public type: EdgeType = EdgeType.UNDIRECTED) {\n  \n  }\n  \n  public toString(): string {\n    let arrow = EdgeType.UNDIRECTED === this.type ? '--' : '->';\n    let left = this.lhs.id;\n    let right = this.rhs.id;\n    \n    if (EdgeType.UNDIRECTED === this.type) {\n      left = Math.min(this.lhs.id, this.rhs.id);\n      right = (this.lhs.id === left) ? this.rhs.id : this.lhs.id;\n    }\n    \n    return left + arrow + right;\n  }\n}\n\nexport class JtEdge extends BEdge {\n  constructor(public sepSet: SepSet) {\n    super(sepSet.left, sepSet.right, EdgeType.UNDIRECTED);\n  }\n  \n  public toString(): string {\n    return this.sepSet.left.toString() + '--' +\n      this.sepSet.toString() + '--' +\n      this.sepSet.right.toString();\n  }\n}\n\nexport enum EdgeType {\n  UNDIRECTED = 1, DIRECTED\n}\n\nexport class Dag extends BGraph {\n  \n  constructor() {\n    super();\n  }\n  \n  public getParents(id: number): Set<number> {\n    let keys = Array.from(this.edges.keys());\n    let parents = keys.filter(key => this.edges.get(key).has(id));\n    return new Set(parents);\n  }\n  \n  public getChildren(id: number): Set<number> {\n    return this.edges.get(id);\n  }\n  \n  public edgeExists(id1: number, id2: number): boolean {\n    if (this.edges.has(id1) && this.edges.get(id1).has(id2)) {\n      return true;\n    }\n    return false;\n  }\n  \n  protected shouldAdd(edge: BEdge): boolean {\n    let parent = edge.lhs;\n    let child = edge.rhs;\n    \n    if (parent.id === child.id) {\n      return false;\n    }\n    \n    if (!this.edges.get(parent.id).has(child.id)) {\n      if (!this.edges.get(child.id).has(parent.id)) {\n        if (!(new DagPathDetector(this, child.id, parent.id)).exists()) {\n          return true;\n        }\n      }\n    }\n    \n    return false;\n  }\n}\n\nexport class Bbn extends Dag {\n  protected shouldAdd(edge: BEdge): boolean {\n    if (!(edge.lhs instanceof BbnNode) || !(edge.rhs instanceof BbnNode)) {\n      return false;\n    }\n    return super.shouldAdd(edge);\n  }\n}\n\nclass DagPathDetector {\n  seen: Set<number>;\n  graph: Dag;\n  start: number;\n  stop: number;\n  \n  constructor(graph: Dag, start: number, stop: number) {\n    this.seen = new Set<number>();\n    this.graph = graph;\n    this.start = start;\n    this.stop = stop;\n  }\n  \n  public exists(): boolean {\n    if (this.start === this.stop) {\n      return true;\n    }\n    return this.find(this.start);\n  }\n  \n  private find(id: number): boolean {\n    let children = this.graph.getChildren(id);\n    if (children.has(this.stop)) {\n      return true;\n    } else {\n      this.seen.add(id);\n      for (let child of children) {\n        if (!this.seen.has(child) && this.find(child)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n\nexport class Pdag extends BGraph {\n  public getParents(id: number): Set<number> {\n    let parents = Array.from(this.edges.keys())\n      .filter(key => this.edges.get(key).has(id) && !this.edges.get(id).has(key));\n    return new Set(parents);\n  }\n  \n  public getOutNodes(id: number): Set<number> {\n    let parents = this.getParents(id);\n    let subset = Array.from(this.getNeighbors(id)).filter(item => !parents.has(item));\n    return new Set(subset);\n  }\n  \n  protected shouldAdd(edge: BEdge): boolean {\n    let parent = edge.lhs;\n    let child = edge.rhs;\n    \n    if (parent.id === child.id) {\n      return false;\n    }\n    \n    if (!this.edges.get(parent.id).has(child.id)) {\n      if (!this.edges.get(child.id).has(parent.id)) {\n        if (!(new PdagPathDetector(this, child.id, parent.id)).exists()) {\n          return true;\n        }\n      }\n    }\n    \n    return false;\n  }\n}\n\nclass PdagPathDetector {\n  seen: Set<number>;\n  graph: Pdag;\n  start: number;\n  stop: number;\n  \n  constructor(graph: Pdag, start: number, stop: number) {\n    this.seen = new Set<number>();\n    this.graph = graph;\n    this.start = start;\n    this.stop = stop;\n  }\n  \n  public exists(): boolean {\n    if (this.start === this.stop) {\n      return true;\n    }\n    return this.find(this.start);\n  }\n  \n  private find(id: number): boolean {\n    let outNodes = this.graph.getOutNodes(id);\n    if (outNodes.has(this.stop)) {\n      return true;\n    } else {\n      this.seen.add(id);\n      for (let outNode of outNodes) {\n        if (!this.seen.has(outNode)) {\n          if (this.find(outNode)) {\n            return true;\n          }\n        }\n      }\n    }\n    \n    return false;\n  }\n}\n\nexport class Ug extends BGraph {\n  constructor() {\n    super();\n  }\n}\n\nexport class JoinTree extends Ug {\n  listener: JoinTreeListener;\n  potentials: Map<number, Potential>;\n  evidences: Map<number, Map<string, Potential>>;\n  \n  constructor() {\n    super();\n    this.potentials = new Map<number, Potential>();\n    this.evidences = new Map<number, Map<string, Potential>>();\n  }\n  \n  public getBbnPotential(node: BbnNode): Potential {\n    let clique = node.metadata.get('parent.clique') as Clique;\n    return PotentialUtil.normalize(PotentialUtil.marginalizeFor(this, clique, [node]));\n  }\n  \n  public unmarkCliques() {\n    this.getCliques().forEach(clique => clique.unmark());\n  }\n  \n  public getBbnNodes(): BbnNode[] {\n    let nodes = new Map<number, BbnNode>();\n    \n    this.getCliques().forEach(clique => {\n      clique.nodes.forEach(node => nodes.set(node.id, node));\n    });\n    \n    let bbnNodes: BbnNode[] = [];\n    nodes.forEach((v, k) => bbnNodes.push(v));\n    return bbnNodes;\n  }\n  \n  public getBbnNode(id: number): BbnNode {\n    let bbnNodes = this.getBbnNodes();\n    for (let i = 0; i < bbnNodes.length; i++) {\n      if (id === bbnNodes[i].id) {\n        return bbnNodes[i];\n      }\n    }\n    return new BbnNode(new Variable(-1, '_dummy_', new Set()));\n  }\n  \n  public getBbnNodeByName(name: string): BbnNode {\n    return this.getBbnNodes().filter(n => n.variable.name === name)[0];\n  }\n  \n  public findCliquesWithNodeAndParents(id: number): Clique[] {\n    return this.getCliques()\n      .filter(clique => {\n        if (!(clique.contains(id))) {\n          return false;\n        }\n        \n        let bbnNode = this.getBbnNode(id);\n        if (bbnNode.metadata.has('parents')) {\n          let parents: BNode[] = bbnNode.metadata.get('parents') as BNode[];\n          for (let i = 0; i < parents.length; i++) {\n            let parent = parents[i];\n            if (!(clique.contains(parent.id))) {\n              return false;\n            }\n          }\n        }\n        \n        return true;\n      });\n  }\n  \n  public addPotential(clique: Clique, potential: Potential): JoinTree {\n    this.potentials.set(clique.id, potential);\n    return this;\n  }\n  \n  public getCliques(): Clique[] {\n    return this.getNodes()\n      .filter(n => !(n instanceof SepSet))\n      .map(n => n as Clique);\n  }\n  \n  public getSepSets(): SepSet[] {\n    return this.getNodes()\n      .filter(n => (n instanceof SepSet))\n      .map(n => n as SepSet);\n  }\n  \n  public addEdge(edge: BEdge): BGraph {\n    if (!(edge instanceof JtEdge)) {\n      return this;\n    }\n    \n    let jtEdge = edge as JtEdge;\n    let sepSet = jtEdge.sepSet;\n    let lhs = jtEdge.lhs;\n    let rhs = jtEdge.rhs;\n    \n    if (this.shouldAdd(edge)) {\n      this.addNode(sepSet);\n      this.addNode(lhs);\n      this.addNode(rhs);\n      \n      this.edges.get(lhs.id).add(sepSet.id);\n      this.edges.get(sepSet.id).add(lhs.id);\n      \n      this.edges.get(rhs.id).add(sepSet.id);\n      this.edges.get(sepSet.id).add(rhs.id);\n    }\n    \n    return this;\n  }\n  \n  public setListener(listener: JoinTreeListener) {\n    this.listener = listener;\n  }\n  \n  public getEvidence(node: BbnNode, value: string): Potential {\n    if (!this.evidences.has(node.id)) {\n      this.evidences.set(node.id, new Map<string, Potential>());\n    }\n    \n    if (!this.evidences.get(node.id).has(value)) {\n      let potentialEntry = new PotentialEntry();\n      potentialEntry.add(node.id, value);\n      potentialEntry.value = 1.0;\n      \n      let potential = new Potential();\n      potential.addEntry(potentialEntry);\n      \n      this.evidences.get(node.id).set(value, potential);\n    }\n    \n    return this.evidences.get(node.id).get(value);\n  }\n  \n  public unobserve(nodes: BbnNode[]): JoinTree {\n    let evidences = nodes.map(n => this.getUnobservedEvidence(n));\n    this.updateEvidences(evidences);\n    return this;\n  }\n  \n  public unobserveAll(): JoinTree {\n    this.unobserve(this.getBbnNodes());\n    return this;\n  }\n  \n  public updateEvidences(evidences: Evidence[]): JoinTree {\n    evidences.forEach(e => e.validate());\n    let change = this.getChangeType(evidences);\n    evidences.forEach(evidence => {\n      let node = evidence.node;\n      let potentials = this.evidences.get(node.id);\n      \n      evidence.values.forEach((v, k) => {\n        let potential = potentials.get(k);\n        potential.entries[0].value = v;\n      });\n    });\n    this.notifyListener(change);\n    return this;\n  }\n  \n  public setObservation(evidence: Evidence): JoinTree {\n    // only deal with observation types in this method\n    if (EvidenceType.OBSERVATION !== evidence.type) {\n      // console.log('evidence not observation type returning');\n      return this;\n    }\n    \n    // check to see if previous evidence was also observation\n    // evidence that is observation type always has only one value that is 1\n    let potentials = this.evidences.get(evidence.node.id);\n    let pvalues = Array.from(potentials.keys())\n      .filter(v => {\n        let potential = potentials.get(v);\n        let entry = potential.entries[0];\n        let p = entry.value;\n        if (p === 1.0) {\n          return true;\n        }\n        return false;\n      });\n    let cvalues = Array.from(evidence.values.keys())\n      .filter(v => 1.0 === evidence.values.get(v));\n    \n    if (1 === pvalues.length) {\n      // previous evidence was of type observation\n      // both current and previous evidences are observation type\n      // console.log('both previous and current evidences are of type observation');\n      \n      let lastValue = pvalues[0];\n      let currValue = cvalues[0];\n      if (lastValue === currValue) {\n        // if the last value is equal to the current value, unobserve it\n        // console.log(lastValue + ' equals ' + currValue + ' so will unobserve');\n        this.unobserve([evidence.node]);\n      } else {\n        // console.log(lastValue + ' NOT equals ' + currValue + ' so will update evidence');\n        this.updateEvidences([evidence]);\n      }\n    } else {\n      // console.log('number previous values === 1 was ' + pvalues.length + ' so will update evidence');\n      this.updateEvidences([evidence]);\n    }\n    \n    return this;\n  }\n  \n  protected shouldAdd(edge: BEdge): boolean {\n    let jtEdge = edge as JtEdge;\n    let sepSet = jtEdge.sepSet;\n    let lhs = jtEdge.lhs as Clique;\n    let rhs = jtEdge.rhs as Clique;\n    \n    if (lhs.id === rhs.id) {\n      // console.log('false: ' + jtEdge.toString());\n      return false;\n    }\n    \n    if (!(new JoinTreePathDetector(this, lhs.id, rhs.id)).exists()) {\n      // console.log('true: ' +  jtEdge.toString());\n      return true;\n    }\n    \n    // console.log('false: ' + jtEdge.toString());\n    return false;\n  }\n  \n  private getChangeType(evidences: Evidence[]): ChangeType {\n    let changes = evidences.map(evidence => {\n      let node = evidence.node;\n      let potentials = this.evidences.get(node.id);\n      let change = evidence.compare(potentials);\n      return change;\n    });\n    let count = changes.filter(c => ChangeType.RETRACTION === c).length;\n    if (count > 0) {\n      return ChangeType.RETRACTION;\n    }\n    \n    count = changes.filter(c => ChangeType.UPDATE === c).length;\n    if (count > 0) {\n      return ChangeType.UPDATE;\n    }\n    \n    return ChangeType.NONE;\n  }\n  \n  private getUnobservedEvidence(node: BbnNode): Evidence {\n    let evidence = new Evidence(node, EvidenceType.UNOBSERVE);\n    node.variable.values.forEach(v => evidence.addValue(v, 1.0));\n    return evidence;\n  }\n  \n  private notifyListener(change: ChangeType) {\n    if (this.listener) {\n      if (ChangeType.RETRACTION === change) {\n        this.listener.evidenceRetracted(this);\n      } else if (ChangeType.UPDATE === change) {\n        this.listener.evidenceUpdated(this);\n      }\n    }\n  }\n}\n\nclass JoinTreePathDetector {\n  seen: Set<number>;\n  graph: JoinTree;\n  start: number;\n  stop: number;\n  \n  constructor(graph: JoinTree, start: number, stop: number) {\n    this.seen = new Set<number>();\n    this.graph = graph;\n    this.start = start;\n    this.stop = stop;\n  }\n  \n  public exists(): boolean {\n    if (this.start === this.stop) {\n      return true;\n    }\n    return this.find(this.start);\n  }\n  \n  private find(id: number): boolean {\n    let neighbors = this.graph.getNeighbors(id);\n    if (neighbors.has(this.stop)) {\n      return true;\n    } else {\n      this.seen.add(id);\n      for (let neighbor of neighbors) {\n        if (!this.seen.has(neighbor)) {\n          if (this.find(neighbor)) {\n            return true;\n          }\n        }\n      }\n    }\n    \n    return false;\n  }\n}\n\nexport interface JoinTreeListener {\n  evidenceRetracted(jointree: JoinTree): void;\n  \n  evidenceUpdated(jointree: JoinTree): void;\n}\n\nexport enum EvidenceType {\n  VIRTUAL = 1, FINDING, OBSERVATION, UNOBSERVE\n}\n\nexport enum ChangeType {\n  NONE = 1, UPDATE, RETRACTION\n}\n\nexport class EvidenceBuilder {\n  values = new Map<string, number>();\n  node: BbnNode;\n  type = EvidenceType.OBSERVATION;\n  \n  public withNode(node: BbnNode): EvidenceBuilder {\n    this.node = node;\n    return this;\n  }\n  \n  public withType(type: EvidenceType): EvidenceBuilder {\n    this.type = type;\n    return this;\n  }\n  \n  public withEvidence(val: string, likelihood: number): EvidenceBuilder {\n    this.values.set(val, likelihood);\n    return this;\n  }\n  \n  public build(): Evidence {\n    let evidence = new Evidence(this.node, this.type);\n    this.values.forEach((v, k) => evidence.values.set(k, v));\n    return evidence;\n  }\n}\n\nexport class Evidence {\n  values: Map<string, number>;\n  \n  constructor(public node: BbnNode, public type: EvidenceType) {\n    this.values = new Map<string, number>();\n  }\n  \n  public addValue(value: string, likelihood: number): Evidence {\n    this.values.set(value, likelihood);\n    return this;\n  }\n  \n  public compare(potentials: Map<string, Potential>): ChangeType {\n    let that = this.convert(potentials);\n    \n    let unobserveThat = this.isUnobserved(that);\n    let unobserveThis = this.isUnobserved(this.values);\n    \n    if (unobserveThat && unobserveThis) {\n      return ChangeType.NONE;\n    }\n    \n    let observeThat = this.isObserved(that);\n    let observeThis = this.isObserved(this.values);\n    \n    if (observeThat && observeThis) {\n      let s1 = this.getObservedValue(that);\n      let s2 = this.getObservedValue(this.values);\n      \n      if (s1 === s2) {\n        return ChangeType.NONE;\n      } else {\n        return ChangeType.RETRACTION;\n      }\n    }\n    \n    return ChangeType.RETRACTION;\n  }\n  \n  public validate() {\n    this.node.variable.values.forEach(value => {\n      if (!this.values.has(value)) {\n        this.values.set(value, 0.0);\n      }\n    });\n    \n    if (EvidenceType.VIRTUAL === this.type) {\n      let sum = this.node.variable.values\n        .map(value => this.values.get(value))\n        .reduce((a, b) => a + b);\n      this.node.variable.values.forEach(value => {\n        let d = this.values.get(value) / sum;\n        this.values.set(value, d);\n      });\n    } else if (EvidenceType.FINDING === this.type) {\n      this.node.variable.values.forEach(value => {\n        let d = this.values.get(value) > 0.0 ? 1.0 : 0.0;\n        this.values.set(value, d);\n      });\n      \n      let count = this.node.variable.values\n        .map(value => this.values.get(value))\n        .reduce((a, b) => a + b);\n      \n      if (0 === count) {\n        this.node.variable.values.forEach(value => this.values.set(value, 1.0));\n      }\n    } else if (EvidenceType.OBSERVATION === this.type) {\n      let keys = Array.from(this.values.keys())\n        .sort((a, b) => -1 * CompareUtil.intCompare(this.values.get(a), this.values.get(b)));\n      let key = keys[0];\n      \n      this.node.variable.values.forEach(value => {\n        if (key === value) {\n          this.values.set(value, 1.0);\n        } else {\n          this.values.set(value, 0.0);\n        }\n      });\n    } else if (EvidenceType.UNOBSERVE === this.type) {\n      this.node.variable.values.forEach(value => this.values.set(value, 1.0));\n    }\n  }\n  \n  private convert(map: Map<string, Potential>): Map<string, number> {\n    let m = new Map<string, number>();\n    map.forEach((v, k) => {\n      let likelihood = v.entries[0].value;\n      m.set(k, likelihood);\n    });\n    return m;\n  }\n  \n  private isUnobserved(values: Map<string, number>): boolean {\n    let counts = 0;\n    values.forEach((v, k) => counts += v);\n    return (counts === values.size);\n  }\n  \n  private isObserved(values: Map<string, number>): boolean {\n    let countOne = 0;\n    let countZero = 0;\n    values.forEach((v, k) => {\n      if (1.0 === v) {\n        countOne++;\n      } else if (0.0 === v) {\n        countZero++;\n      }\n    });\n    \n    return (1 === countOne && values.size - 1 === countZero);\n  }\n  \n  private getObservedValue(values: Map<string, number>): string {\n    let strs = Array.from(values.keys())\n      .filter(k => (1.0 === values.get(k)));\n    return strs[0];\n  }\n}\n\nexport class Potential {\n  public entries: PotentialEntry[];\n  \n  constructor() {\n    this.entries = [];\n  }\n  \n  public addEntry(entry: PotentialEntry) {\n    this.entries.push(entry);\n  }\n  \n  public getMatchingEntries(entry: PotentialEntry): PotentialEntry[] {\n    return this.entries.filter(e => e.matches(entry));\n  }\n  \n  public toString(): string {\n    let s = '';\n    this.entries.forEach(entry => s += entry.toString() + '\\n');\n    return s.substr(0, s.length - 1);\n  }\n}\n\nexport class PotentialEntry {\n  public entries: Map<number, string>;\n  public value: number;\n  \n  constructor() {\n    this.entries = new Map<number, string>();\n    this.value = 1.0;\n  }\n  \n  public add(id: number, value: string): PotentialEntry {\n    if (!this.entries.has(id)) {\n      this.entries.set(id, value);\n    }\n    return this;\n  }\n  \n  public matches(that: PotentialEntry): boolean {\n    for (let key of that.entries.keys()) {\n      if (!this.entries.has(key) || !(this.entries.get(key) === that.entries.get(key))) {\n        return false;\n      }\n    }\n    return true;\n  }\n  \n  public toString(): string {\n    let s = '';\n    this.entries.forEach((v, k) => {\n      s += k + '=' + v + ',';\n    });\n    s += this.value;\n    return s;\n  }\n  \n  public duplicate(): PotentialEntry {\n    let entry = new PotentialEntry();\n    this.entries.forEach((v, k) => entry.add(k, v));\n    entry.value = this.value;\n    return entry;\n  }\n}\n\nexport class IdUtil {\n  static hashOfStr(s: string): number {\n    let hash = 0;\n    if (s.length === 0) {\n      return hash;\n    }\n    \n    for (let i = 0, len = s.length; i < len; i++) {\n      let chr = s.charCodeAt(i);\n      hash = ((hash << 5) - hash) + chr;\n      hash |= 0; // Convert to 32bit integer\n    }\n    return hash;\n  }\n  \n  static hashOfArr(arr: string[]): number {\n    return this.hashOfStr(arr.sort().join('-'));\n  }\n}\n\nexport class PotentialUtil {\n  public static passSingleMessage(jointree: JoinTree, x: Clique, s: SepSet, y: Clique) {\n    // console.log('passing message ' + x.toString() + ' -- ' + s.toString() + ' -- ' + y.toString());\n    let oldSepSetPotential = jointree.potentials.get(s.id);\n    let yPotential = jointree.potentials.get(y.id);\n    \n    let newSepSetPotential = this.marginalizeFor(jointree, x, s.nodes);\n    jointree.addPotential(s, newSepSetPotential);\n    \n    this.multiply(yPotential, this.divide(newSepSetPotential, oldSepSetPotential));\n  }\n  \n  public static marginalizeFor(joinTree: JoinTree, clique: Clique, nodes: BbnNode[]): Potential {\n    let potential = this.getPotentialFromNodes(nodes);\n    let cliquePotential = joinTree.potentials.get(clique.id);\n    \n    potential.entries.forEach(entry => {\n      let matchedEntries = cliquePotential.getMatchingEntries(entry);\n      let t = 0.0;\n      matchedEntries.forEach(matchedEntry => t += matchedEntry.value);\n      entry.value = t;\n    });\n    \n    return potential;\n  }\n  \n  public static normalize(potential: Potential): Potential {\n    let sum = 0.0;\n    potential.entries.forEach(entry => {\n      sum += entry.value;\n    });\n    \n    potential.entries.forEach(entry => {\n      let d = entry.value / sum;\n      entry.value = d;\n    });\n    \n    return potential;\n  }\n  \n  public static divide(numerator: Potential, denominator: Potential): Potential {\n    let potential = new Potential();\n    numerator.entries.forEach(entry => {\n      let entries = denominator.entries;\n      if (entries.length > 0) {\n        let e = entries[0];\n        let d = (this.isZero(entry.value) || this.isZero(e.value)) ? 0.0 : entry.value / e.value;\n        let newEntry = entry.duplicate();\n        newEntry.value = d;\n        potential.addEntry(newEntry);\n      }\n    });\n    return potential;\n  }\n  \n  public static multiply(bigger: Potential, smaller: Potential) {\n    smaller.entries.forEach(entry => {\n      let entries = bigger.getMatchingEntries(entry);\n      entries.forEach(e => {\n        let d = e.value * entry.value;\n        e.value = d;\n      });\n    });\n  }\n  \n  public static getPotential(node: BbnNode, parents: BbnNode[]) {\n    let potential = this.getPotentialFromNodes(this.merge(node, parents));\n    let total = potential.entries.length;\n    for (let i = 0; i < total; i++) {\n      let prob = node.probs[i];\n      potential.entries[i].value = prob;\n    }\n    return potential;\n  }\n  \n  public static getPotentialFromNodes(nodes: BbnNode[]): Potential {\n    let valueLists = nodes.map(n => n.variable.values);\n    let cartesian = this.getCartesianProduct(valueLists);\n    let potential = new Potential();\n    cartesian.forEach(values => {\n      let entry = new PotentialEntry();\n      for (let i = 0; i < nodes.length; i++) {\n        let value = values[i];\n        let id = nodes[i].id;\n        entry.add(id, value);\n      }\n      potential.addEntry(entry);\n    });\n    return potential;\n  }\n  \n  private static isZero(d: number): boolean {\n    return (0 === d);\n  }\n  \n  private static getCartesianProduct(lists: string[][]): string[][] {\n    let results: string[][] = [];\n    if (lists.length === 0) {\n      return results;\n    } else {\n      let first = lists[0];\n      let tail = lists.slice(0).splice(1);\n      let remaining = this.getCartesianProduct(tail);\n      first.forEach(condition => {\n        if (remaining.length > 0) {\n          remaining.forEach(rlist => {\n            let result: string[] = [];\n            result.push(condition);\n            rlist.forEach(r => result.push(r));\n            results.push(result);\n          });\n        } else {\n          let result: string[] = [];\n          result.push(condition);\n          results.push(result);\n        }\n      });\n    }\n    return results;\n  }\n  \n  private static merge(node: BbnNode, parents: BbnNode[]): BbnNode[] {\n    let nodes: BbnNode[] = [];\n    parents.forEach(n => nodes.push(n));\n    nodes.push(node);\n    \n    return nodes;\n  }\n}\n\nexport class BbnUtil {\n  public static getHuangGraph(): Bbn {\n    let a = new BbnNode(new Variable(0, 'a', new Set<string>(['on', 'off'])), [0.5, 0.5]);\n    let b = new BbnNode(new Variable(1, 'b', new Set<string>(['on', 'off'])), [0.5, 0.5, 0.4, 0.6]);\n    let c = new BbnNode(new Variable(2, 'c', new Set<string>(['on', 'off'])), [0.7, 0.3, 0.2, 0.8]);\n    let d = new BbnNode(new Variable(3, 'd', new Set<string>(['on', 'off'])), [0.9, 0.1, 0.5, 0.5]);\n    let e = new BbnNode(new Variable(4, 'e', new Set<string>(['on', 'off'])), [0.3, 0.7, 0.6, 0.4]);\n    let f = new BbnNode(new Variable(5, 'f', new Set<string>(['on', 'off'])), [0.01, 0.99, 0.01, 0.99, 0.01, 0.99, 0.99, 0.01]);\n    let g = new BbnNode(new Variable(6, 'g', new Set<string>(['on', 'off'])), [0.8, 0.2, 0.1, 0.9]);\n    let h = new BbnNode(new Variable(7, 'h', new Set<string>(['on', 'off'])), [0.05, 0.95, 0.95, 0.05, 0.95, 0.05, 0.95, 0.05]);\n    \n    let bbn = new Bbn()\n      .addNode(a)\n      .addNode(b)\n      .addNode(c)\n      .addNode(d)\n      .addNode(e)\n      .addNode(f)\n      .addNode(g)\n      .addNode(h)\n      .addEdge(new BEdge(a, b, EdgeType.DIRECTED))\n      .addEdge(new BEdge(a, c, EdgeType.DIRECTED))\n      .addEdge(new BEdge(b, d, EdgeType.DIRECTED))\n      .addEdge(new BEdge(c, e, EdgeType.DIRECTED))\n      .addEdge(new BEdge(d, f, EdgeType.DIRECTED))\n      .addEdge(new BEdge(e, f, EdgeType.DIRECTED))\n      .addEdge(new BEdge(c, g, EdgeType.DIRECTED))\n      .addEdge(new BEdge(e, h, EdgeType.DIRECTED))\n      .addEdge(new BEdge(g, h, EdgeType.DIRECTED)) as Bbn;\n    return bbn;\n  }\n}\n\nexport class CompareUtil {\n  public static intCompare(x: number, y: number): number {\n    return (x < y) ? -1 : ((x === y) ? 0 : 1);\n  }\n  \n  public static strCompare(x: string, y: string): number {\n    return x.localeCompare(y);\n  }\n}\n"]}