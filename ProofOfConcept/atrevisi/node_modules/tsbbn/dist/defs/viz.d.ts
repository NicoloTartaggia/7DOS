export declare class VGraph {
    nodes: Map<number, VNode>;
    edges: Map<number, VEdge>;
    constructor();
    getNodes(): VNode[];
    getEdges(): VEdge[];
    addNode(node: VNode): VGraph;
    addEdge(edge: VEdge): VGraph;
    getNode(id: number): VNode;
    getPath(id1: number, id2: number): VPath;
}
export declare class VEdge {
    parent: VNode;
    child: VNode;
    points: VPoint[];
    constructor(parent: VNode, child: VNode);
    getId(): number;
    toString(): string;
}
export declare class VNode {
    id: number;
    label: string;
    values: string[];
    probs: number[];
    width: number;
    height: number;
    point: VPoint;
    constructor(id: number, label: string, values: string[], probs: number[]);
    updatePoint(point: VPoint): void;
    getRefId(): string;
    getTranslation(): string;
    getMid(): VPoint;
    normalizeProbs(probs: number[]): number[];
    getPath(that: VNode): VPath;
    toString(): string;
    private getPoint;
    private getDistance;
    private getOutCode;
}
export declare class VPoint {
    x: number;
    y: number;
    error: boolean;
    constructor(x: number, y: number);
    toString(): string;
    getTheta(that: VPoint): number;
}
export declare class VPath {
    p1: VPoint;
    p2: VPoint;
    error: boolean;
    constructor(p1: VPoint, p2: VPoint);
    toString(): string;
}
export declare class Util {
    static hashOfStr(s: string): number;
    static hashOfArr(arr: string[]): number;
}
export interface InferenceEngine {
    getGraph(): VGraph;
    updateEvidence(id: number, value: string): void;
    getProbs(id: number): number[];
}
export declare class NoOpInferenceEngine implements InferenceEngine {
    graph: VGraph;
    constructor(graph: VGraph);
    getGraph(): VGraph;
    updateEvidence(id: number, value: string): void;
    getProbs(id: number): number[];
}
export declare class RenderOptions {
    id: string;
    width: number;
    height: number;
    constructor(id: string, width: number, height: number);
}
export declare class GraphRenderer {
    engine: InferenceEngine;
    options: RenderOptions;
    graph: VGraph;
    constructor(engine: InferenceEngine, options: RenderOptions);
    draw(): void;
    private initSvg;
    private getDagreGraph;
    private layoutGraph;
    private drawEdges;
    private drawNodes;
    private leftPad;
    private rightPad;
    private formatNodeName;
    private formatValue;
    private formatPct;
}
