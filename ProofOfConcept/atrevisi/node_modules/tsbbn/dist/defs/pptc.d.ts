import { Bbn, Clique, Dag, JoinTree, JoinTreeListener, Ug } from './graph';
export declare class InferenceController implements JoinTreeListener {
    static apply(bbn: Bbn): JoinTree;
    evidenceRetracted(jointree: JoinTree): void;
    evidenceUpdated(jointree: JoinTree): void;
}
export declare class Initializer {
    static initialize(joinTree: JoinTree): JoinTree;
    private static getClique;
}
export declare class Moralizer {
    static moralize(dag: Dag): Ug;
}
export declare class PotentialInitializer {
    static init(bbn: Bbn): void;
}
export declare class Propagator {
    static propagate(joinTree: JoinTree): JoinTree;
    private static collectEvidence;
    private static distributeEvidence;
}
export declare class Transformer {
    static transform(cliques: Clique[]): JoinTree;
    private static getSepSets;
}
export declare class Triangulator {
    static triangulate(m: Ug): Clique[];
    private static duplicate;
    private static selectNode;
    private static getWeight;
    private static getEdgesToAdd;
    private static isSubset;
}
export declare class EvidenceCollector {
    joinTree: JoinTree;
    startClique: Clique;
    constructor(joinTree: JoinTree, startClique: Clique);
    start(): void;
    private walk;
}
export declare class EvidenceDistributor {
    joinTree: JoinTree;
    startClique: Clique;
    constructor(joinTree: JoinTree, startClique: Clique);
    start(): void;
    private walk;
}
