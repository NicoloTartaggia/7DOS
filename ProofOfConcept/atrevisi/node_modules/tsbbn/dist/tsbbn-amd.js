define("graph", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class Variable {
        constructor(id, name, _values) {
            this.id = id;
            this.name = name;
            this._values = _values;
            this.values = [..._values];
        }
    }
    exports.Variable = Variable;
    class BGraph {
        constructor() {
            this.nodes = new Map();
            this.edges = new Map();
        }
        getNeighbors(id) {
            let keys = Array.from(this.edges.keys());
            let neighbors1 = keys.filter(key => this.edges.get(key).has(id));
            let neighbors2 = this.edges.has(id) ? Array.from(this.edges.get(id).values()) : [];
            let neighbors = neighbors1.concat(neighbors2);
            return new Set(neighbors);
        }
        getNode(id) {
            return this.nodes.get(id);
        }
        getNodes() {
            return Array.from(this.nodes.keys()).map(id => this.nodes.get(id));
        }
        getEdges() {
            let keys = Array.from(this.edges.keys());
            let stream = keys.map(lhsId => {
                let edges = Array.from(this.edges.get(lhsId))
                    .map(rhsId => {
                    let edgeType = EdgeType.UNDIRECTED;
                    let leftId = lhsId;
                    let rightId = rhsId;
                    if (!this.edges.get(rhsId).has(lhsId)) {
                        edgeType = EdgeType.DIRECTED;
                    }
                    else {
                        leftId = Math.min(lhsId, rhsId);
                        rightId = leftId === lhsId ? rhsId : lhsId;
                    }
                    return new BEdge(new BNode(leftId), new BNode(rightId), edgeType);
                });
                return edges;
            });
            return this.removeDuplicates(this.flatten(stream));
        }
        addNode(node) {
            if (!this.nodes.has(node.id)) {
                this.nodes.set(node.id, node);
            }
            if (!this.edges.has(node.id)) {
                this.edges.set(node.id, new Set());
            }
            return this;
        }
        addEdge(edge) {
            let lhs = edge.lhs;
            let rhs = edge.rhs;
            this.addNode(lhs);
            this.addNode(rhs);
            if (this.shouldAdd(edge)) {
                let left = lhs.id;
                let right = rhs.id;
                if (EdgeType.UNDIRECTED === edge.type) {
                    this.edges.get(left).add(right);
                    this.edges.get(right).add(left);
                }
                else {
                    this.edges.get(left).add(right);
                }
            }
            return this;
        }
        edgeExists(id1, id2) {
            if (this.edges.has(id1) && this.edges.get(id1).has(id2)) {
                return true;
            }
            if (this.edges.has(id2) && this.edges.get(id2).has(id1)) {
                return true;
            }
            return false;
        }
        removeNode(id) {
            this.nodes.delete(id);
            this.edges.delete(id);
            this.edges.forEach((v, k) => v.delete(id));
        }
        shouldAdd(edge) {
            let lhs = edge.lhs;
            let rhs = edge.rhs;
            if (lhs.id === rhs.id) {
                return false;
            }
            if (!this.edges.get(lhs.id).has(rhs.id)) {
                if (!this.edges.get(rhs.id).has(lhs.id)) {
                    return true;
                }
            }
            return false;
        }
        flatten(edges) {
            let list = [];
            for (let i = 0; i < edges.length; i++) {
                for (let j = 0; j < edges[i].length; j++) {
                    list.push(edges[i][j]);
                }
            }
            return list;
        }
        removeDuplicates(edges) {
            let map = new Map();
            let arr = [];
            edges.forEach(e => {
                let key = e.toString();
                if (!map.has(key)) {
                    map.set(key, e);
                    arr.push(e);
                }
            });
            return arr;
        }
    }
    exports.BGraph = BGraph;
    class BNode {
        constructor(id) {
            this.id = id;
            this.metadata = new Map();
        }
        addMetadata(key, val) {
            this.metadata.set(key, val);
            return this;
        }
    }
    exports.BNode = BNode;
    class BbnNode extends BNode {
        constructor(variable, probs = []) {
            super(variable.id);
            this.variable = variable;
            this.probs = probs;
        }
        getWeight() {
            return this.variable.values.length;
        }
        toString() {
            let s = this.variable.name + ' {';
            s += this.variable.values.join(',');
            s += '}';
            return s;
        }
    }
    exports.BbnNode = BbnNode;
    class Clique extends BNode {
        constructor(nodes) {
            super(IdUtil.hashOfArr(nodes.map(n => '' + n.id)));
            this.nodes = nodes;
            this._marked = false;
        }
        isMarked() {
            return this._marked;
        }
        mark() {
            this._marked = true;
        }
        unmark() {
            this._marked = false;
        }
        nodesMinus(nodes) {
            let ids = this.nodes.map(n => n.id);
            return nodes.filter(n => ids.indexOf(n.id) === -1);
        }
        isSuperset(that) {
            let s1 = this.nodes.map(n => n.id);
            let s2 = new Set(that.nodes.map(n => n.id));
            let s3 = new Set(s1.filter(id => s2.has(id)));
            if (s2.size === s3.size) {
                // console.log(this.toString() + ' is superset of ' + that.toString());
                return true;
            }
            // console.log(this.toString() + ' is NOT superset of ' + that.toString());
            return false;
        }
        getWeight() {
            let weight = 1;
            this.nodes.forEach(n => {
                weight = weight * n.getWeight();
            });
            return weight;
        }
        contains(id) {
            let result = this.nodes.find(n => n.id === id);
            if (result) {
                return true;
            }
            return false;
        }
        getSepSet(that) {
            return new SepSet(this, that);
        }
        toString() {
            return '(' +
                this.nodes
                    .map(n => n.variable.name)
                    .sort((a, b) => CompareUtil.strCompare(a, b))
                    .join('-') +
                ')';
        }
    }
    exports.Clique = Clique;
    class SepSet extends Clique {
        constructor(left, right) {
            super([]);
            this.left = left;
            this.right = right;
            let set2 = new Set(left.nodes.map(n => n.id));
            let set1 = new Set(right.nodes.filter(n => set2.has(n.id)).map(n => n.id));
            this.nodes = left.nodes.filter(n => set1.has(n.id));
            this.id = IdUtil.hashOfArr(this.nodes.map(n => '' + n.id));
        }
        getCost() {
            return this.left.getWeight() + this.right.getWeight();
        }
        getMass() {
            return this.nodes.length;
        }
        toString() {
            return '[' +
                this.nodes
                    .map(n => n.variable.name)
                    .sort((a, b) => CompareUtil.strCompare(a, b))
                    .join('-') +
                ']';
        }
    }
    exports.SepSet = SepSet;
    class BEdge {
        constructor(lhs, rhs, type = EdgeType.UNDIRECTED) {
            this.lhs = lhs;
            this.rhs = rhs;
            this.type = type;
        }
        toString() {
            let arrow = EdgeType.UNDIRECTED === this.type ? '--' : '->';
            let left = this.lhs.id;
            let right = this.rhs.id;
            if (EdgeType.UNDIRECTED === this.type) {
                left = Math.min(this.lhs.id, this.rhs.id);
                right = (this.lhs.id === left) ? this.rhs.id : this.lhs.id;
            }
            return left + arrow + right;
        }
    }
    exports.BEdge = BEdge;
    class JtEdge extends BEdge {
        constructor(sepSet) {
            super(sepSet.left, sepSet.right, EdgeType.UNDIRECTED);
            this.sepSet = sepSet;
        }
        toString() {
            return this.sepSet.left.toString() + '--' +
                this.sepSet.toString() + '--' +
                this.sepSet.right.toString();
        }
    }
    exports.JtEdge = JtEdge;
    var EdgeType;
    (function (EdgeType) {
        EdgeType[EdgeType["UNDIRECTED"] = 1] = "UNDIRECTED";
        EdgeType[EdgeType["DIRECTED"] = 2] = "DIRECTED";
    })(EdgeType = exports.EdgeType || (exports.EdgeType = {}));
    class Dag extends BGraph {
        constructor() {
            super();
        }
        getParents(id) {
            let keys = Array.from(this.edges.keys());
            let parents = keys.filter(key => this.edges.get(key).has(id));
            return new Set(parents);
        }
        getChildren(id) {
            return this.edges.get(id);
        }
        edgeExists(id1, id2) {
            if (this.edges.has(id1) && this.edges.get(id1).has(id2)) {
                return true;
            }
            return false;
        }
        shouldAdd(edge) {
            let parent = edge.lhs;
            let child = edge.rhs;
            if (parent.id === child.id) {
                return false;
            }
            if (!this.edges.get(parent.id).has(child.id)) {
                if (!this.edges.get(child.id).has(parent.id)) {
                    if (!(new DagPathDetector(this, child.id, parent.id)).exists()) {
                        return true;
                    }
                }
            }
            return false;
        }
    }
    exports.Dag = Dag;
    class Bbn extends Dag {
        shouldAdd(edge) {
            if (!(edge.lhs instanceof BbnNode) || !(edge.rhs instanceof BbnNode)) {
                return false;
            }
            return super.shouldAdd(edge);
        }
    }
    exports.Bbn = Bbn;
    class DagPathDetector {
        constructor(graph, start, stop) {
            this.seen = new Set();
            this.graph = graph;
            this.start = start;
            this.stop = stop;
        }
        exists() {
            if (this.start === this.stop) {
                return true;
            }
            return this.find(this.start);
        }
        find(id) {
            let children = this.graph.getChildren(id);
            if (children.has(this.stop)) {
                return true;
            }
            else {
                this.seen.add(id);
                for (let child of children) {
                    if (!this.seen.has(child) && this.find(child)) {
                        return true;
                    }
                }
            }
            return false;
        }
    }
    class Pdag extends BGraph {
        getParents(id) {
            let parents = Array.from(this.edges.keys())
                .filter(key => this.edges.get(key).has(id) && !this.edges.get(id).has(key));
            return new Set(parents);
        }
        getOutNodes(id) {
            let parents = this.getParents(id);
            let subset = Array.from(this.getNeighbors(id)).filter(item => !parents.has(item));
            return new Set(subset);
        }
        shouldAdd(edge) {
            let parent = edge.lhs;
            let child = edge.rhs;
            if (parent.id === child.id) {
                return false;
            }
            if (!this.edges.get(parent.id).has(child.id)) {
                if (!this.edges.get(child.id).has(parent.id)) {
                    if (!(new PdagPathDetector(this, child.id, parent.id)).exists()) {
                        return true;
                    }
                }
            }
            return false;
        }
    }
    exports.Pdag = Pdag;
    class PdagPathDetector {
        constructor(graph, start, stop) {
            this.seen = new Set();
            this.graph = graph;
            this.start = start;
            this.stop = stop;
        }
        exists() {
            if (this.start === this.stop) {
                return true;
            }
            return this.find(this.start);
        }
        find(id) {
            let outNodes = this.graph.getOutNodes(id);
            if (outNodes.has(this.stop)) {
                return true;
            }
            else {
                this.seen.add(id);
                for (let outNode of outNodes) {
                    if (!this.seen.has(outNode)) {
                        if (this.find(outNode)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
    }
    class Ug extends BGraph {
        constructor() {
            super();
        }
    }
    exports.Ug = Ug;
    class JoinTree extends Ug {
        constructor() {
            super();
            this.potentials = new Map();
            this.evidences = new Map();
        }
        getBbnPotential(node) {
            let clique = node.metadata.get('parent.clique');
            return PotentialUtil.normalize(PotentialUtil.marginalizeFor(this, clique, [node]));
        }
        unmarkCliques() {
            this.getCliques().forEach(clique => clique.unmark());
        }
        getBbnNodes() {
            let nodes = new Map();
            this.getCliques().forEach(clique => {
                clique.nodes.forEach(node => nodes.set(node.id, node));
            });
            let bbnNodes = [];
            nodes.forEach((v, k) => bbnNodes.push(v));
            return bbnNodes;
        }
        getBbnNode(id) {
            let bbnNodes = this.getBbnNodes();
            for (let i = 0; i < bbnNodes.length; i++) {
                if (id === bbnNodes[i].id) {
                    return bbnNodes[i];
                }
            }
            return new BbnNode(new Variable(-1, '_dummy_', new Set()));
        }
        getBbnNodeByName(name) {
            return this.getBbnNodes().filter(n => n.variable.name === name)[0];
        }
        findCliquesWithNodeAndParents(id) {
            return this.getCliques()
                .filter(clique => {
                if (!(clique.contains(id))) {
                    return false;
                }
                let bbnNode = this.getBbnNode(id);
                if (bbnNode.metadata.has('parents')) {
                    let parents = bbnNode.metadata.get('parents');
                    for (let i = 0; i < parents.length; i++) {
                        let parent = parents[i];
                        if (!(clique.contains(parent.id))) {
                            return false;
                        }
                    }
                }
                return true;
            });
        }
        addPotential(clique, potential) {
            this.potentials.set(clique.id, potential);
            return this;
        }
        getCliques() {
            return this.getNodes()
                .filter(n => !(n instanceof SepSet))
                .map(n => n);
        }
        getSepSets() {
            return this.getNodes()
                .filter(n => (n instanceof SepSet))
                .map(n => n);
        }
        addEdge(edge) {
            if (!(edge instanceof JtEdge)) {
                return this;
            }
            let jtEdge = edge;
            let sepSet = jtEdge.sepSet;
            let lhs = jtEdge.lhs;
            let rhs = jtEdge.rhs;
            this.addNode(sepSet);
            this.addNode(lhs);
            this.addNode(rhs);
            if (this.shouldAdd(edge)) {
                this.edges.get(lhs.id).add(sepSet.id);
                this.edges.get(sepSet.id).add(lhs.id);
                this.edges.get(rhs.id).add(sepSet.id);
                this.edges.get(sepSet.id).add(rhs.id);
            }
            return this;
        }
        setListener(listener) {
            this.listener = listener;
        }
        getEvidence(node, value) {
            if (!this.evidences.has(node.id)) {
                this.evidences.set(node.id, new Map());
            }
            if (!this.evidences.get(node.id).has(value)) {
                let potentialEntry = new PotentialEntry();
                potentialEntry.add(node.id, value);
                potentialEntry.value = 1.0;
                let potential = new Potential();
                potential.addEntry(potentialEntry);
                this.evidences.get(node.id).set(value, potential);
            }
            return this.evidences.get(node.id).get(value);
        }
        unobserve(nodes) {
            let evidences = nodes.map(n => this.getUnobservedEvidence(n));
            this.updateEvidences(evidences);
            return this;
        }
        unobserveAll() {
            this.unobserve(this.getBbnNodes());
            return this;
        }
        updateEvidences(evidences) {
            evidences.forEach(e => e.validate());
            let change = this.getChangeType(evidences);
            evidences.forEach(evidence => {
                let node = evidence.node;
                let potentials = this.evidences.get(node.id);
                evidence.values.forEach((v, k) => {
                    let potential = potentials.get(k);
                    potential.entries[0].value = v;
                });
            });
            this.notifyListener(change);
            return this;
        }
        setObservation(evidence) {
            // only deal with observation types in this method
            if (EvidenceType.OBSERVATION !== evidence.type) {
                // console.log('evidence not observation type returning');
                return this;
            }
            // check to see if previous evidence was also observation
            // evidence that is observation type always has only one value that is 1
            let potentials = this.evidences.get(evidence.node.id);
            let pvalues = Array.from(potentials.keys())
                .filter(v => {
                let potential = potentials.get(v);
                let entry = potential.entries[0];
                let p = entry.value;
                if (p === 1.0) {
                    return true;
                }
                return false;
            });
            let cvalues = Array.from(evidence.values.keys())
                .filter(v => 1.0 === evidence.values.get(v));
            if (1 === pvalues.length) {
                // previous evidence was of type observation
                // both current and previous evidences are observation type
                // console.log('both previous and current evidences are of type observation');
                let lastValue = pvalues[0];
                let currValue = cvalues[0];
                if (lastValue === currValue) {
                    // if the last value is equal to the current value, unobserve it
                    // console.log(lastValue + ' equals ' + currValue + ' so will unobserve');
                    this.unobserve([evidence.node]);
                }
                else {
                    // console.log(lastValue + ' NOT equals ' + currValue + ' so will update evidence');
                    this.updateEvidences([evidence]);
                }
            }
            else {
                // console.log('number previous values === 1 was ' + pvalues.length + ' so will update evidence');
                this.updateEvidences([evidence]);
            }
            return this;
        }
        shouldAdd(edge) {
            let jtEdge = edge;
            let sepSet = jtEdge.sepSet;
            let lhs = jtEdge.lhs;
            let rhs = jtEdge.rhs;
            if (lhs.id === rhs.id) {
                // console.log('false: ' + jtEdge.toString());
                return false;
            }
            if (!(new JoinTreePathDetector(this, lhs.id, rhs.id)).exists()) {
                // console.log('true: ' +  jtEdge.toString());
                return true;
            }
            // console.log('false: ' + jtEdge.toString());
            return false;
        }
        getChangeType(evidences) {
            let changes = evidences.map(evidence => {
                let node = evidence.node;
                let potentials = this.evidences.get(node.id);
                let change = evidence.compare(potentials);
                return change;
            });
            let count = changes.filter(c => ChangeType.RETRACTION === c).length;
            if (count > 0) {
                return ChangeType.RETRACTION;
            }
            count = changes.filter(c => ChangeType.UPDATE === c).length;
            if (count > 0) {
                return ChangeType.UPDATE;
            }
            return ChangeType.NONE;
        }
        getUnobservedEvidence(node) {
            let evidence = new Evidence(node, EvidenceType.UNOBSERVE);
            node.variable.values.forEach(v => evidence.addValue(v, 1.0));
            return evidence;
        }
        notifyListener(change) {
            if (this.listener) {
                if (ChangeType.RETRACTION === change) {
                    this.listener.evidenceRetracted(this);
                }
                else if (ChangeType.UPDATE === change) {
                    this.listener.evidenceUpdated(this);
                }
            }
        }
    }
    exports.JoinTree = JoinTree;
    class JoinTreePathDetector {
        constructor(graph, start, stop) {
            this.seen = new Set();
            this.graph = graph;
            this.start = start;
            this.stop = stop;
        }
        exists() {
            if (this.start === this.stop) {
                return true;
            }
            return this.find(this.start);
        }
        find(id) {
            let neighbors = this.graph.getNeighbors(id);
            if (neighbors.has(this.stop)) {
                return true;
            }
            else {
                this.seen.add(id);
                for (let neighbor of neighbors) {
                    if (!this.seen.has(neighbor)) {
                        if (this.find(neighbor)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
    }
    var EvidenceType;
    (function (EvidenceType) {
        EvidenceType[EvidenceType["VIRTUAL"] = 1] = "VIRTUAL";
        EvidenceType[EvidenceType["FINDING"] = 2] = "FINDING";
        EvidenceType[EvidenceType["OBSERVATION"] = 3] = "OBSERVATION";
        EvidenceType[EvidenceType["UNOBSERVE"] = 4] = "UNOBSERVE";
    })(EvidenceType = exports.EvidenceType || (exports.EvidenceType = {}));
    var ChangeType;
    (function (ChangeType) {
        ChangeType[ChangeType["NONE"] = 1] = "NONE";
        ChangeType[ChangeType["UPDATE"] = 2] = "UPDATE";
        ChangeType[ChangeType["RETRACTION"] = 3] = "RETRACTION";
    })(ChangeType = exports.ChangeType || (exports.ChangeType = {}));
    class EvidenceBuilder {
        constructor() {
            this.values = new Map();
            this.type = EvidenceType.OBSERVATION;
        }
        withNode(node) {
            this.node = node;
            return this;
        }
        withType(type) {
            this.type = type;
            return this;
        }
        withEvidence(val, likelihood) {
            this.values.set(val, likelihood);
            return this;
        }
        build() {
            let evidence = new Evidence(this.node, this.type);
            this.values.forEach((v, k) => evidence.values.set(k, v));
            return evidence;
        }
    }
    exports.EvidenceBuilder = EvidenceBuilder;
    class Evidence {
        constructor(node, type) {
            this.node = node;
            this.type = type;
            this.values = new Map();
        }
        addValue(value, likelihood) {
            this.values.set(value, likelihood);
            return this;
        }
        compare(potentials) {
            let that = this.convert(potentials);
            let unobserveThat = this.isUnobserved(that);
            let unobserveThis = this.isUnobserved(this.values);
            if (unobserveThat && unobserveThis) {
                return ChangeType.NONE;
            }
            let observeThat = this.isObserved(that);
            let observeThis = this.isObserved(this.values);
            if (observeThat && observeThis) {
                let s1 = this.getObservedValue(that);
                let s2 = this.getObservedValue(this.values);
                if (s1 === s2) {
                    return ChangeType.NONE;
                }
                else {
                    return ChangeType.RETRACTION;
                }
            }
            return ChangeType.RETRACTION;
        }
        validate() {
            this.node.variable.values.forEach(value => {
                if (!this.values.has(value)) {
                    this.values.set(value, 0.0);
                }
            });
            if (EvidenceType.VIRTUAL === this.type) {
                let sum = this.node.variable.values
                    .map(value => this.values.get(value))
                    .reduce((a, b) => a + b);
                this.node.variable.values.forEach(value => {
                    let d = this.values.get(value) / sum;
                    this.values.set(value, d);
                });
            }
            else if (EvidenceType.FINDING === this.type) {
                this.node.variable.values.forEach(value => {
                    let d = this.values.get(value) > 0.0 ? 1.0 : 0.0;
                    this.values.set(value, d);
                });
                let count = this.node.variable.values
                    .map(value => this.values.get(value))
                    .reduce((a, b) => a + b);
                if (0 === count) {
                    this.node.variable.values.forEach(value => this.values.set(value, 1.0));
                }
            }
            else if (EvidenceType.OBSERVATION === this.type) {
                let keys = Array.from(this.values.keys())
                    .sort((a, b) => -1 * CompareUtil.intCompare(this.values.get(a), this.values.get(b)));
                let key = keys[0];
                this.node.variable.values.forEach(value => {
                    if (key === value) {
                        this.values.set(value, 1.0);
                    }
                    else {
                        this.values.set(value, 0.0);
                    }
                });
            }
            else if (EvidenceType.UNOBSERVE === this.type) {
                this.node.variable.values.forEach(value => this.values.set(value, 1.0));
            }
        }
        convert(map) {
            let m = new Map();
            map.forEach((v, k) => {
                let likelihood = v.entries[0].value;
                m.set(k, likelihood);
            });
            return m;
        }
        isUnobserved(values) {
            let counts = 0;
            values.forEach((v, k) => counts += v);
            return (counts === values.size);
        }
        isObserved(values) {
            let countOne = 0;
            let countZero = 0;
            values.forEach((v, k) => {
                if (1.0 === v) {
                    countOne++;
                }
                else if (0.0 === v) {
                    countZero++;
                }
            });
            return (1 === countOne && values.size - 1 === countZero);
        }
        getObservedValue(values) {
            let strs = Array.from(values.keys())
                .filter(k => (1.0 === values.get(k)));
            return strs[0];
        }
    }
    exports.Evidence = Evidence;
    class Potential {
        constructor() {
            this.entries = [];
        }
        addEntry(entry) {
            this.entries.push(entry);
        }
        getMatchingEntries(entry) {
            return this.entries.filter(e => e.matches(entry));
        }
        toString() {
            let s = '';
            this.entries.forEach(entry => s += entry.toString() + '\n');
            return s.substr(0, s.length - 1);
        }
    }
    exports.Potential = Potential;
    class PotentialEntry {
        constructor() {
            this.entries = new Map();
            this.value = 1.0;
        }
        add(id, value) {
            if (!this.entries.has(id)) {
                this.entries.set(id, value);
            }
            return this;
        }
        matches(that) {
            for (let key of that.entries.keys()) {
                if (!this.entries.has(key) || !(this.entries.get(key) === that.entries.get(key))) {
                    return false;
                }
            }
            return true;
        }
        toString() {
            let s = '';
            this.entries.forEach((v, k) => {
                s += k + '=' + v + ',';
            });
            s += this.value;
            return s;
        }
        duplicate() {
            let entry = new PotentialEntry();
            this.entries.forEach((v, k) => entry.add(k, v));
            entry.value = this.value;
            return entry;
        }
    }
    exports.PotentialEntry = PotentialEntry;
    class IdUtil {
        static hashOfStr(s) {
            let hash = 0;
            if (s.length === 0) {
                return hash;
            }
            for (let i = 0, len = s.length; i < len; i++) {
                let chr = s.charCodeAt(i);
                hash = ((hash << 5) - hash) + chr;
                hash |= 0; // Convert to 32bit integer
            }
            return hash;
        }
        static hashOfArr(arr) {
            return this.hashOfStr(arr.sort().join('-'));
        }
    }
    exports.IdUtil = IdUtil;
    class PotentialUtil {
        static passSingleMessage(jointree, x, s, y) {
            // console.log('passing message ' + x.toString() + ' -- ' + s.toString() + ' -- ' + y.toString());
            let oldSepSetPotential = jointree.potentials.get(s.id);
            let yPotential = jointree.potentials.get(y.id);
            let newSepSetPotential = this.marginalizeFor(jointree, x, s.nodes);
            jointree.addPotential(s, newSepSetPotential);
            this.multiply(yPotential, this.divide(newSepSetPotential, oldSepSetPotential));
        }
        static marginalizeFor(joinTree, clique, nodes) {
            let potential = this.getPotentialFromNodes(nodes);
            let cliquePotential = joinTree.potentials.get(clique.id);
            potential.entries.forEach(entry => {
                let matchedEntries = cliquePotential.getMatchingEntries(entry);
                let t = 0.0;
                matchedEntries.forEach(matchedEntry => t += matchedEntry.value);
                entry.value = t;
            });
            return potential;
        }
        static normalize(potential) {
            let sum = 0.0;
            potential.entries.forEach(entry => {
                sum += entry.value;
            });
            potential.entries.forEach(entry => {
                let d = entry.value / sum;
                entry.value = d;
            });
            return potential;
        }
        static divide(numerator, denominator) {
            let potential = new Potential();
            numerator.entries.forEach(entry => {
                let entries = denominator.entries;
                if (entries.length > 0) {
                    let e = entries[0];
                    let d = (this.isZero(entry.value) || this.isZero(e.value)) ? 0.0 : entry.value / e.value;
                    let newEntry = entry.duplicate();
                    newEntry.value = d;
                    potential.addEntry(newEntry);
                }
            });
            return potential;
        }
        static multiply(bigger, smaller) {
            smaller.entries.forEach(entry => {
                let entries = bigger.getMatchingEntries(entry);
                entries.forEach(e => {
                    let d = e.value * entry.value;
                    e.value = d;
                });
            });
        }
        static getPotential(node, parents) {
            let potential = this.getPotentialFromNodes(this.merge(node, parents));
            let total = potential.entries.length;
            for (let i = 0; i < total; i++) {
                let prob = node.probs[i];
                potential.entries[i].value = prob;
            }
            return potential;
        }
        static getPotentialFromNodes(nodes) {
            let valueLists = nodes.map(n => n.variable.values);
            let cartesian = this.getCartesianProduct(valueLists);
            let potential = new Potential();
            cartesian.forEach(values => {
                let entry = new PotentialEntry();
                for (let i = 0; i < nodes.length; i++) {
                    let value = values[i];
                    let id = nodes[i].id;
                    entry.add(id, value);
                }
                potential.addEntry(entry);
            });
            return potential;
        }
        static isZero(d) {
            return (0 === d);
        }
        static getCartesianProduct(lists) {
            let results = [];
            if (lists.length === 0) {
                return results;
            }
            else {
                let first = lists[0];
                let tail = lists.slice(0).splice(1);
                let remaining = this.getCartesianProduct(tail);
                first.forEach(condition => {
                    if (remaining.length > 0) {
                        remaining.forEach(rlist => {
                            let result = [];
                            result.push(condition);
                            rlist.forEach(r => result.push(r));
                            results.push(result);
                        });
                    }
                    else {
                        let result = [];
                        result.push(condition);
                        results.push(result);
                    }
                });
            }
            return results;
        }
        static merge(node, parents) {
            let nodes = [];
            parents.forEach(n => nodes.push(n));
            nodes.push(node);
            return nodes;
        }
    }
    exports.PotentialUtil = PotentialUtil;
    class BbnUtil {
        static getHuangGraph() {
            let a = new BbnNode(new Variable(0, 'a', new Set(['on', 'off'])), [0.5, 0.5]);
            let b = new BbnNode(new Variable(1, 'b', new Set(['on', 'off'])), [0.5, 0.5, 0.4, 0.6]);
            let c = new BbnNode(new Variable(2, 'c', new Set(['on', 'off'])), [0.7, 0.3, 0.2, 0.8]);
            let d = new BbnNode(new Variable(3, 'd', new Set(['on', 'off'])), [0.9, 0.1, 0.5, 0.5]);
            let e = new BbnNode(new Variable(4, 'e', new Set(['on', 'off'])), [0.3, 0.7, 0.6, 0.4]);
            let f = new BbnNode(new Variable(5, 'f', new Set(['on', 'off'])), [0.01, 0.99, 0.01, 0.99, 0.01, 0.99, 0.99, 0.01]);
            let g = new BbnNode(new Variable(6, 'g', new Set(['on', 'off'])), [0.8, 0.2, 0.1, 0.9]);
            let h = new BbnNode(new Variable(7, 'h', new Set(['on', 'off'])), [0.05, 0.95, 0.95, 0.05, 0.95, 0.05, 0.95, 0.05]);
            let bbn = new Bbn()
                .addNode(a)
                .addNode(b)
                .addNode(c)
                .addNode(d)
                .addNode(e)
                .addNode(f)
                .addNode(g)
                .addNode(h)
                .addEdge(new BEdge(a, b, EdgeType.DIRECTED))
                .addEdge(new BEdge(a, c, EdgeType.DIRECTED))
                .addEdge(new BEdge(b, d, EdgeType.DIRECTED))
                .addEdge(new BEdge(c, e, EdgeType.DIRECTED))
                .addEdge(new BEdge(d, f, EdgeType.DIRECTED))
                .addEdge(new BEdge(e, f, EdgeType.DIRECTED))
                .addEdge(new BEdge(c, g, EdgeType.DIRECTED))
                .addEdge(new BEdge(e, h, EdgeType.DIRECTED))
                .addEdge(new BEdge(g, h, EdgeType.DIRECTED));
            return bbn;
        }
    }
    exports.BbnUtil = BbnUtil;
    class CompareUtil {
        static intCompare(x, y) {
            return (x < y) ? -1 : ((x === y) ? 0 : 1);
        }
        static strCompare(x, y) {
            return x.localeCompare(y);
        }
    }
    exports.CompareUtil = CompareUtil;
});
define("pptc", ["require", "exports", "graph"], function (require, exports, graph_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class InferenceController {
        static apply(bbn) {
            PotentialInitializer.init(bbn);
            let ug = Moralizer.moralize(bbn);
            let cliques = Triangulator.triangulate(ug);
            let joinTree = Transformer.transform(cliques);
            Initializer.initialize(joinTree);
            Propagator.propagate(joinTree);
            joinTree.setListener(new InferenceController());
            return joinTree;
        }
        evidenceRetracted(jointree) {
            Initializer.initialize(jointree);
            Propagator.propagate(jointree);
        }
        evidenceUpdated(jointree) {
            Propagator.propagate(jointree);
        }
    }
    exports.InferenceController = InferenceController;
    class Initializer {
        static initialize(joinTree) {
            joinTree.getCliques().forEach(clique => {
                let potential = graph_1.PotentialUtil.getPotentialFromNodes(clique.nodes);
                joinTree.addPotential(clique, potential);
            });
            joinTree.getSepSets().forEach(sepSet => {
                let potential = graph_1.PotentialUtil.getPotentialFromNodes(sepSet.nodes);
                joinTree.addPotential(sepSet, potential);
            });
            joinTree.getBbnNodes().forEach(node => {
                let clique = this.getClique(node, joinTree);
                // console.log(node.variable.name + ' mapped to clique ' + clique.toString());
                let p1 = joinTree.potentials.get(clique.id);
                let p2 = node.potential;
                // console.log(p1.toString());
                // console.log('>>>>');
                // console.log(p2.toString());
                // console.log('----');
                graph_1.PotentialUtil.multiply(p1, p2);
                // console.log(p1.toString());
                // console.log('****');
            });
            joinTree.getBbnNodes().forEach(node => {
                node.variable.values.forEach(value => {
                    let clique = node.metadata.get('parent.clique');
                    let cliquePotential = joinTree.potentials.get(clique.id);
                    let nodePotential = joinTree.getEvidence(node, value);
                    graph_1.PotentialUtil.multiply(cliquePotential, nodePotential);
                    // console.log(clique.toString());
                    // console.log(cliquePotential.toString());
                });
            });
            return joinTree;
        }
        static getClique(node, jointree) {
            let clique;
            if (!node.metadata.has('parent.clique')) {
                let cliques = jointree.findCliquesWithNodeAndParents(node.id)
                    .sort((a, b) => graph_1.CompareUtil.intCompare(a.id, b.id));
                clique = cliques[0];
            }
            else {
                clique = node.metadata.get('parent.clique');
            }
            node.addMetadata('parent.clique', clique);
            return clique;
        }
    }
    exports.Initializer = Initializer;
    class Moralizer {
        static moralize(dag) {
            let ug = new graph_1.Ug();
            dag.getNodes().forEach(node => ug.addNode(node));
            dag.getEdges().forEach(edge => ug.addEdge(new graph_1.BEdge(edge.lhs, edge.rhs)));
            dag.getNodes().forEach(node => {
                let parents = Array.from(dag.getParents(node.id));
                let size = parents.length;
                for (let i = 0; i < size; i++) {
                    let pa1 = dag.getNode(parents[i]);
                    for (let j = i + 1; j < size; j++) {
                        let pa2 = dag.getNode(parents[j]);
                        ug.addEdge(new graph_1.BEdge(pa1, pa2));
                    }
                }
            });
            dag.getNodes().forEach(node => {
                let parents = Array.from(dag.getParents(node.id)).map(id => dag.getNode(id));
                node.addMetadata('parents', parents);
            });
            return ug;
        }
    }
    exports.Moralizer = Moralizer;
    class PotentialInitializer {
        static init(bbn) {
            bbn.getNodes().forEach(node => {
                let bbnNode = node;
                let parents = Array.from(bbn.getParents(node.id)).map(id => bbn.getNode(id));
                bbnNode.potential = graph_1.PotentialUtil.getPotential(bbnNode, parents);
            });
        }
    }
    exports.PotentialInitializer = PotentialInitializer;
    class Propagator {
        static propagate(joinTree) {
            let cliques = joinTree.getCliques().sort((a, b) => graph_1.CompareUtil.intCompare(a.id, b.id));
            let x = cliques[0];
            // console.log(x.toString());
            joinTree.unmarkCliques();
            this.collectEvidence(joinTree, x);
            joinTree.unmarkCliques();
            this.distributeEvidence(joinTree, x);
            return joinTree;
        }
        static collectEvidence(jointree, start) {
            let collector = new EvidenceCollector(jointree, start);
            collector.start();
        }
        static distributeEvidence(jointree, start) {
            let distributor = new EvidenceDistributor(jointree, start);
            distributor.start();
        }
    }
    exports.Propagator = Propagator;
    class Transformer {
        static transform(cliques) {
            let jointree = new graph_1.JoinTree();
            let sepSets = this.getSepSets(cliques);
            let n = (cliques.length - 1) * 2;
            let total = 0;
            for (let i = 0; i < sepSets.length; i++) {
                let sepSet = sepSets[i];
                jointree.addEdge(new graph_1.JtEdge(sepSet));
                total += 2;
                if (total === n) {
                    break;
                }
            }
            return jointree;
        }
        static getSepSets(cliques) {
            let sepSets = [];
            let size = cliques.length;
            for (let i = 0; i < size; i++) {
                for (let j = i + 1; j < size; j++) {
                    sepSets.push(new graph_1.SepSet(cliques[i], cliques[j]));
                }
            }
            return sepSets.sort((a, b) => {
                let result = -1 * graph_1.CompareUtil.intCompare(a.getMass(), b.getMass());
                if (0 === result) {
                    result = graph_1.CompareUtil.intCompare(a.getCost(), b.getCost());
                    if (0 === result) {
                        result = graph_1.CompareUtil.intCompare(a.id, b.id);
                    }
                }
                return result;
            });
        }
    }
    exports.Transformer = Transformer;
    class Triangulator {
        static triangulate(m) {
            let cliques = [];
            let mm = this.duplicate(m);
            while (mm.getNodes().length > 0) {
                let nodeClique = this.selectNode(mm);
                let clique = new graph_1.Clique(nodeClique.getBbnNodes());
                if (!this.isSubset(cliques, clique)) {
                    cliques.push(clique);
                }
                mm.removeNode(nodeClique.node.id);
                nodeClique.edges.forEach(e => {
                    m.addEdge(e);
                    mm.addEdge(e);
                });
            }
            return cliques;
        }
        static duplicate(g) {
            let ug = new graph_1.Ug();
            g.getNodes().forEach(n => ug.addNode(n));
            g.getEdges().forEach(e => ug.addEdge(e));
            return ug;
        }
        static selectNode(m) {
            let cliques = m.getNodes()
                .map(node => {
                let weight = this.getWeight(node, m);
                let edges = this.getEdgesToAdd(node, m);
                let neighbors = Array.from(m.getNeighbors(node.id)).map(id => m.getNode(id));
                return new NodeClique(node, neighbors, weight, edges);
            })
                .sort((a, b) => {
                let result = graph_1.CompareUtil.intCompare(a.edges.length, b.edges.length);
                if (0 === result) {
                    result = graph_1.CompareUtil.intCompare(a.weight, b.weight);
                    if (0 === result) {
                        result = graph_1.CompareUtil.intCompare(a.node.id, b.node.id);
                    }
                }
                return result;
            });
            return cliques[0];
        }
        static getWeight(n, m) {
            let weight = n.getWeight();
            Array.from(m.getNeighbors(n.id))
                .map(id => m.getNode(id))
                .forEach(neighbor => weight *= neighbor.getWeight());
            return weight;
        }
        static getEdgesToAdd(n, m) {
            let edges = [];
            let neighbors = Array.from(m.getNeighbors(n.id)).map(id => m.getNode(id));
            let size = neighbors.length;
            for (let i = 0; i < size; i++) {
                let ne1 = neighbors[i];
                for (let j = 0; j < size; j++) {
                    let ne2 = neighbors[j];
                    if (!m.edgeExists(ne1.id, ne2.id)) {
                        edges.push(new graph_1.BEdge(ne1, ne2));
                    }
                }
            }
            return edges;
        }
        static isSubset(cliques, clique) {
            for (let i = 0; i < cliques.length; i++) {
                if (cliques[i].isSuperset(clique)) {
                    return true;
                }
            }
            return false;
        }
    }
    exports.Triangulator = Triangulator;
    class NodeClique {
        constructor(node, neighbors, weight, edges) {
            this.node = node;
            this.neighbors = neighbors;
            this.weight = weight;
            this.edges = edges;
        }
        getBbnNodes() {
            let nodes = this.neighbors.slice(0);
            nodes.push(this.node);
            return nodes.map(n => n);
        }
    }
    class EvidenceCollector {
        constructor(joinTree, startClique) {
            this.joinTree = joinTree;
            this.startClique = startClique;
        }
        start() {
            // console.log('STARTING EVIDENCE COLLECTION from ' + this.startClique.toString());
            this.startClique.mark();
            this.joinTree.getNeighbors(this.startClique.id).forEach(sepSetId => {
                let sepSet = this.joinTree.getNode(sepSetId);
                Array.from(this.joinTree.getNeighbors(sepSetId))
                    .map(id => this.joinTree.getNode(id))
                    .filter(clique => !clique.isMarked())
                    .forEach(y => {
                    this.walk(this.startClique, sepSet, y);
                });
            });
        }
        walk(x, s, y) {
            y.mark();
            Array.from(this.joinTree.getNeighbors(y.id))
                .map(id => this.joinTree.getNode(id))
                .forEach(sepSet => {
                Array.from(this.joinTree.getNeighbors(sepSet.id))
                    .map(id => this.joinTree.getNode(id))
                    .filter(clique => !clique.isMarked())
                    .forEach(clique => this.walk(y, sepSet, clique));
            });
            graph_1.PotentialUtil.passSingleMessage(this.joinTree, y, s, x);
        }
    }
    exports.EvidenceCollector = EvidenceCollector;
    class EvidenceDistributor {
        constructor(joinTree, startClique) {
            this.joinTree = joinTree;
            this.startClique = startClique;
        }
        start() {
            // console.log('STARTING EVIDENCE DISTRIBUTION from ' + this.startClique.toString());
            this.startClique.mark();
            this.joinTree.getNeighbors(this.startClique.id).forEach(sepSetId => {
                let sepSet = this.joinTree.getNode(sepSetId);
                Array.from(this.joinTree.getNeighbors(sepSetId))
                    .map(id => this.joinTree.getNode(id))
                    .filter(clique => !clique.isMarked())
                    .forEach(y => {
                    graph_1.PotentialUtil.passSingleMessage(this.joinTree, this.startClique, sepSet, y);
                    this.walk(this.startClique, sepSet, y);
                });
            });
        }
        walk(x, s, y) {
            y.mark();
            Array.from(this.joinTree.getNeighbors(y.id))
                .map(id => this.joinTree.getNode(id))
                .forEach(sepSet => {
                Array.from(this.joinTree.getNeighbors(sepSet.id))
                    .map(id => this.joinTree.getNode(id))
                    .filter(clique => !clique.isMarked())
                    .forEach(clique => {
                    graph_1.PotentialUtil.passSingleMessage(this.joinTree, y, sepSet, clique);
                    this.walk(y, sepSet, clique);
                });
            });
        }
    }
    exports.EvidenceDistributor = EvidenceDistributor;
});
define("viz", ["require", "exports", "d3"], function (require, exports, d3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const OUT_LEFT = 1, OUT_TOP = 2, OUT_RIGHT = 4, OUT_BOTTOM = 8;
    const MAX_NODE_NAME_LENGTH = 15;
    const MAX_VALUE_LENGTH = 5;
    const MAX_PCT_VALUE = 6;
    const DEFAULT_PADDING = '\u00A0';
    class VGraph {
        constructor() {
            this.nodes = new Map();
            this.edges = new Map();
        }
        getNodes() {
            return Array.from(this.nodes.values());
        }
        getEdges() {
            return Array.from(this.edges.values());
        }
        addNode(node) {
            this.nodes.set(node.id, node);
            return this;
        }
        addEdge(edge) {
            this.edges.set(edge.getId(), edge);
            return this;
        }
        getNode(id) {
            return this.nodes.get(id);
        }
        getPath(id1, id2) {
            return this.getNode(id1).getPath(this.getNode(id2));
        }
    }
    exports.VGraph = VGraph;
    class VEdge {
        constructor(parent, child) {
            this.parent = parent;
            this.child = child;
            this.points = [];
        }
        getId() {
            return Util.hashOfStr(this.toString());
        }
        toString() {
            return this.parent.label + '->' + this.child.label;
        }
    }
    exports.VEdge = VEdge;
    class VNode {
        constructor(id, label, values, probs) {
            this.id = id;
            this.label = label;
            this.values = values;
            this.probs = probs;
            this.width = 150;
            this.probs = this.normalizeProbs(this.probs);
            this.height = values.length * 15 + 20;
            this.point = new VPoint(Math.random(), Math.random());
        }
        updatePoint(point) {
            this.point.x = point.x;
            this.point.y = point.y;
        }
        getRefId() {
            return this.label;
        }
        getTranslation() {
            return 'translate(' + this.point.x + ',' + this.point.y + ')';
        }
        getMid() {
            let dx = this.width / 2.0 + this.point.x;
            let dy = this.height / 2.0 + this.point.y;
            return new VPoint(dx, dy);
        }
        normalizeProbs(probs) {
            let sum = probs.reduce((a, b) => a + b);
            return probs.map(p => p / sum);
        }
        getPath(that) {
            let theta = that.point.getTheta(this.point);
            let p1 = this.getPoint(theta);
            let p2 = that.getPoint(theta + Math.PI);
            let error = p1.error || p2.error ? true : false;
            let path = new VPath(p1, p2);
            path.error = error;
            return path;
        }
        toString() {
            return this.id + '|' +
                this.label + '|' +
                this.values.join(',') + '|' +
                this.probs.join(',') + '|' +
                this.point.toString();
        }
        getPoint(theta) {
            let c = this.getMid();
            let cx = c.x;
            let cy = c.y;
            let w = this.width / 2.0;
            let h = this.height / 2.0;
            let d = this.getDistance(new VPoint(cx, cy), new VPoint(cx + w, cy + h));
            let x = cx + d * Math.cos(theta);
            let y = cy + d * Math.sin(theta);
            let ocode = this.getOutCode(new VPoint(x, y));
            let px = 0;
            let py = 0;
            let error = false;
            switch (ocode) {
                case OUT_TOP:
                    px = cx - h * ((x - cx) / (y - cy));
                    py = cy - h;
                    break;
                case OUT_LEFT:
                    px = cx - w;
                    py = cy - w * ((y - cy) / (x - cx));
                    break;
                case OUT_BOTTOM:
                    px = cx + h * ((x - cx) / (y - cy));
                    py = cy + h;
                    break;
                case OUT_RIGHT:
                    px = cx + w;
                    py = cy + w * ((y - cy) / (x - cx));
                    break;
                default:
                    error = true;
            }
            let p = new VPoint(px, py);
            p.error = error;
            return p;
        }
        getDistance(p1, p2) {
            let x = p1.x - p2.x;
            let y = p1.y - p2.y;
            let d = Math.sqrt((x * x) + (y * y));
            return d;
        }
        getOutCode(point) {
            let out = 0;
            if (this.width <= 0) {
                out |= OUT_LEFT | OUT_RIGHT;
            }
            else if (point.x < this.point.x) {
                out |= OUT_LEFT;
            }
            else if (point.x > this.point.x + this.width) {
                out |= OUT_RIGHT;
            }
            if (this.height <= 0) {
                out |= OUT_TOP | OUT_BOTTOM;
            }
            else if (point.y < this.point.y) {
                out |= OUT_TOP;
            }
            else if (point.y > this.point.y + this.height) {
                out |= OUT_BOTTOM;
            }
            return out;
        }
    }
    exports.VNode = VNode;
    class VPoint {
        constructor(x, y) {
            this.x = x;
            this.y = y;
            this.error = false;
        }
        toString() {
            return '(' + this.x + ',' + this.y + ')';
        }
        getTheta(that) {
            return Math.atan2(this.y - that.y, this.x - that.x);
        }
    }
    exports.VPoint = VPoint;
    class VPath {
        constructor(p1, p2) {
            this.p1 = p1;
            this.p2 = p2;
            this.error = false;
        }
        toString() {
            return this.p1.toString() + ' to ' + this.p2.toString();
        }
    }
    exports.VPath = VPath;
    class Util {
        static hashOfStr(s) {
            let hash = 0;
            if (s.length === 0) {
                return hash;
            }
            for (let i = 0, len = s.length; i < len; i++) {
                let chr = s.charCodeAt(i);
                hash = ((hash << 5) - hash) + chr;
                hash |= 0; // Convert to 32bit integer
            }
            return hash;
        }
        static hashOfArr(arr) {
            return this.hashOfStr(arr.sort().join('-'));
        }
    }
    exports.Util = Util;
    class NoOpInferenceEngine {
        constructor(graph) {
            this.graph = graph;
        }
        getGraph() {
            return this.graph;
        }
        updateEvidence(id, value) {
        }
        getProbs(id) {
            return this.graph.getNode(id).probs;
        }
    }
    exports.NoOpInferenceEngine = NoOpInferenceEngine;
    class RenderOptions {
        constructor(id, width, height) {
            this.id = id;
            this.width = width;
            this.height = height;
        }
    }
    exports.RenderOptions = RenderOptions;
    class GraphRenderer {
        constructor(engine, options) {
            this.engine = engine;
            this.options = options;
            this.graph = this.engine.getGraph();
        }
        draw() {
            this.initSvg();
            this.layoutGraph();
            this.drawEdges();
            this.drawNodes();
        }
        initSvg() {
            d3.select(this.options.id)
                .attr({
                width: this.options.width,
                height: this.options.height
            })
                .append('defs')
                .append('marker')
                .attr({
                id: 'arrow',
                markerWidth: 10,
                markerHeight: 10,
                refX: 5,
                refY: 3,
                orient: 'auto',
                markerUnits: 'strokeWidth'
            })
                .append('path')
                .attr({
                d: 'M0,0 L0,6, L5,3 z',
                fill: '#f00',
                class: 'edge-head'
            });
        }
        getDagreGraph() {
            let g = new dagre.graphlib.Graph();
            g.setGraph({});
            g.setDefaultEdgeLabel(() => {
                return {};
            });
            this.graph.getNodes()
                .forEach(n => {
                g.setNode(n.getRefId(), {
                    label: n.getRefId(),
                    width: n.width,
                    height: n.height
                });
            });
            this.graph.getEdges()
                .forEach(e => {
                g.setEdge(e.parent.getRefId(), e.child.getRefId());
            });
            return g;
        }
        layoutGraph() {
            let g = this.getDagreGraph();
            dagre.layout(g);
            this.graph.getNodes()
                .forEach(n => {
                let dagreNode = g.node(n.getRefId());
                if (dagreNode) {
                    n.updatePoint(new VPoint(dagreNode.x, dagreNode.y));
                }
            });
            this.graph.getEdges()
                .forEach(e => {
                let dagreEdge = g.edge({ v: e.parent.getRefId(), w: e.child.getRefId() });
                if (dagreEdge) {
                    e.points = Array.from(dagreEdge.points)
                        .map(point => {
                        let p = point;
                        return new VPoint(p.x, p.y);
                    });
                }
            });
        }
        drawEdges() {
            let graph = this.graph;
            let edges = d3.select(this.options.id)
                .selectAll('line')
                .data(graph.getEdges())
                .enter()
                .append('line')
                .each(function (d) {
                let path = graph.getPath(d.parent.id, d.child.id);
                d3.select(this).attr({
                    'data-parent': d.parent.getRefId(),
                    'data-child': d.child.getRefId(),
                    x1: path.p1.x,
                    y1: path.p1.y,
                    x2: path.p2.x,
                    y2: path.p2.y,
                    style: 'stroke:rgb(255,0,0);stroke-width:2',
                    class: 'edge-line',
                    'marker-end': 'url(#arrow)'
                });
            });
        }
        drawNodes() {
            let engine = this.engine;
            let graph = this.graph;
            let formatNodeName = this.formatNodeName;
            let formatPct = this.formatPct;
            let formatValue = this.formatValue;
            let leftPad = this.leftPad;
            let rightPad = this.rightPad;
            // set the node group
            let nodes = d3.select(this.options.id)
                .selectAll('g')
                .data(graph.getNodes())
                .enter()
                .append('g')
                .attr({
                id: function (d) {
                    return d.getRefId();
                },
                transform: function (d) {
                    return d.getTranslation();
                },
                class: 'node-group'
            })
                .on('mousedown', function (d) {
                d3.selectAll('g.node-group').sort((a, b) => {
                    if (a.id !== d.id) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                });
            });
            // draw the node rectangle
            nodes.append('rect')
                .attr({
                x: 0,
                y: 0,
                class: 'node-shape',
                style: 'stroke:#000000; fill:none;',
                width: function (d) {
                    return d.width;
                },
                height: function (d) {
                    return d.height;
                },
                'pointer-events': 'visible',
                'data-node': function (d) {
                    return d.getRefId();
                }
            });
            // draw the node's name/label
            nodes.append('text')
                .attr({
                x: function (d) {
                    return d.width / 2;
                },
                y: 15,
                fill: 'black',
                class: 'node-name',
                'font-family': 'monospace',
                'font-size': 15
            })
                .text(function (d) {
                return formatNodeName(d.label);
            })
                .style('text-anchor', 'middle');
            // draw the node's value labels
            nodes.each(function (d) {
                let y = 30;
                d.values.forEach(value => {
                    d3.select(this)
                        .append('text')
                        .attr({
                        x: 2,
                        y: y,
                        class: 'node-value',
                        'font-family': 'monospace',
                        'data-node': function (d) {
                            return d.getRefId();
                        },
                        'data-value': function (d) {
                            return value;
                        }
                    })
                        .on('click', function (e) {
                        let node = e;
                        let h = this;
                        let v = h.attributes['data-value'].value;
                        engine.updateEvidence(node.id, v);
                        graph.getNodes().forEach(node => node.probs = engine.getProbs(node.id));
                        graph.getNodes().forEach(node => {
                            node.values.forEach((value, j) => {
                                // update belief bars
                                let selector = 'rect[data-node="' + node.getRefId() + '"][data-value="' + value + '"]';
                                d3.select(selector).attr({ width: node.probs[j] * 100 });
                                // update probability texts
                                selector = 'text[data-node="' + node.getRefId() + '"][data-pvalue="' + value + '"]';
                                d3.select(selector).text(formatPct(node.probs[j], leftPad));
                            });
                        });
                    })
                        .text(function (d) {
                        return formatValue(value, leftPad);
                    });
                    y += 15;
                });
            });
            // draw the node's percentage text
            nodes.each(function (d) {
                let y = 30;
                for (let i = 0; i < d.probs.length; i++) {
                    d3.select(this)
                        .append('text')
                        .attr({
                        x: 2 + d.width,
                        y: y,
                        'font-family': 'monospace',
                        class: 'node-pct',
                        'data-node': function (d) {
                            return d.getRefId();
                        },
                        'data-pvalue': function (d) {
                            return d.values[i];
                        }
                    })
                        .text(function (d) {
                        return formatPct(d.probs[i], leftPad);
                    });
                    y += 15;
                }
            });
            // draw the node's belief bars
            nodes.each(function (d) {
                let y = 20;
                d.probs.forEach((prob, index) => {
                    d3.select(this)
                        .append('rect')
                        .attr({
                        x: 50,
                        y: y,
                        width: prob * 100,
                        height: 10,
                        class: 'node-bar',
                        'data-node': function (d) {
                            return d.getRefId();
                        },
                        'data-value': function (d) {
                            return d.values[index];
                        }
                    });
                    y += 15;
                });
            });
            // draw the node's interquartile lines
            nodes.each(function (d) {
                let y1 = 20;
                let y2 = d.height - 5;
                let width = d.width - 50;
                let xInc = width / 4.0;
                let x = 50 + xInc;
                for (let i = 0; i < 3; i++) {
                    d3.select(this)
                        .append('line')
                        .attr({
                        x1: x,
                        y1: y1,
                        x2: x,
                        y2: y2,
                        class: 'node-iqline',
                        'stroke-dasharray': '5, 1',
                        style: 'stroke:black; stroke-width:1px',
                    });
                    x += xInc;
                }
            });
            // set the dragging behavior
            let drag = d3.behavior.drag()
                .origin((d, i) => {
                let node = d;
                return node.point;
            })
                .on('dragstart', (d, i) => {
                let e = d3.event;
                e.sourceEvent.stopPropagation();
            })
                .on('drag', (d, i) => {
                let event = d3.event;
                let d3Event = d3.event;
                let mouseEvent = d3Event.sourceEvent;
                let node = d;
                node.point.x = event.x;
                node.point.y = event.y;
                let id = 'g#' + node.getRefId();
                d3.select(id).attr({
                    transform: node.getTranslation()
                });
                let arcs = 'line[data-parent=' + node.getRefId() + ']';
                d3.selectAll(arcs)
                    .each(function (d) {
                    let edge = d;
                    let path = graph.getPath(edge.parent.id, edge.child.id);
                    d3.select(this).attr({
                        x1: path.p1.x,
                        y1: path.p1.y,
                        x2: path.p2.x,
                        y2: path.p2.y
                    });
                });
                arcs = 'line[data-child=' + node.getRefId() + ']';
                d3.selectAll(arcs)
                    .each(function (d) {
                    let edge = d;
                    let path = graph.getPath(edge.parent.id, edge.child.id);
                    d3.select(this).attr({
                        x1: path.p1.x,
                        y1: path.p1.y,
                        x2: path.p2.x,
                        y2: path.p2.y
                    });
                });
            });
            nodes.call(drag);
        }
        leftPad(pad, threhold, str) {
            let ostr = str;
            if (ostr.length < threhold) {
                while (ostr.length < threhold) {
                    ostr = pad + ostr;
                }
                return ostr;
            }
            return ostr;
        }
        rightPad(pad, threhold, str) {
            let ostr = str;
            if (ostr.length < threhold) {
                while (ostr.length < threhold) {
                    ostr += pad;
                }
                return ostr;
            }
            return ostr;
        }
        formatNodeName(v) {
            return v.length > MAX_NODE_NAME_LENGTH ? v.substr(0, MAX_NODE_NAME_LENGTH) : v;
        }
        formatValue(v, padding) {
            let value = v.length > MAX_VALUE_LENGTH ? v.substr(0, MAX_VALUE_LENGTH) : v;
            return padding(DEFAULT_PADDING, MAX_VALUE_LENGTH, value);
        }
        formatPct(p, padding) {
            return padding(DEFAULT_PADDING, MAX_PCT_VALUE, (p * 100).toFixed(2));
        }
    }
    exports.GraphRenderer = GraphRenderer;
});
define("tsbbn", ["require", "exports", "graph", "pptc", "viz"], function (require, exports, graph_2, pptc_1, viz_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BbnUtil = graph_2.BbnUtil;
    exports.Variable = graph_2.Variable;
    exports.BbnNode = graph_2.BbnNode;
    exports.BNode = graph_2.BNode;
    exports.BEdge = graph_2.BEdge;
    exports.EdgeType = graph_2.EdgeType;
    exports.Bbn = graph_2.Bbn;
    exports.JoinTree = graph_2.JoinTree;
    exports.EvidenceType = graph_2.EvidenceType;
    exports.EvidenceBuilder = graph_2.EvidenceBuilder;
    exports.Evidence = graph_2.Evidence;
    exports.InferenceController = pptc_1.InferenceController;
    exports.VNode = viz_1.VNode;
    exports.VEdge = viz_1.VEdge;
    exports.VGraph = viz_1.VGraph;
    exports.GraphRenderer = viz_1.GraphRenderer;
    exports.RenderOptions = viz_1.RenderOptions;
    exports.NoOpInferenceEngine = viz_1.NoOpInferenceEngine;
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
