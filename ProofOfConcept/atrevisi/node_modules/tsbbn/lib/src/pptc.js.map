{"version":3,"sources":["pptc.js"],"names":["Object","defineProperty","exports","value","graph_1","require","InferenceController","jointree","Initializer","initialize","Propagator","propagate","bbn","PotentialInitializer","init","ug","Moralizer","moralize","cliques","Triangulator","triangulate","joinTree","Transformer","transform","setListener","getCliques","forEach","potential","PotentialUtil","getPotentialFromNodes","clique","nodes","addPotential","getSepSets","sepSet","getBbnNodes","getClique","node","p1","potentials","get","id","p2","multiply","variable","values","metadata","cliquePotential","nodePotential","getEvidence","has","findCliquesWithNodeAndParents","sort","a","b","CompareUtil","intCompare","addMetadata","dag","Ug","getNodes","addNode","getEdges","addEdge","BEdge","edge","lhs","rhs","parents","Array","from","getParents","size","length","i","pa1","getNode","j","pa2","map","bbnNode","getPotential","x","unmarkCliques","collectEvidence","distributeEvidence","start","collector","EvidenceCollector","distributor","EvidenceDistributor","JoinTree","c","sepSets","JtEdge","s","SepSet","isEmpty","push","result","getMass","getCost","m","mm","duplicate","nodeClique","selectNode","Clique","isSubset","removeNode","edges","e","g","n","weight","getWeight","getEdgesToAdd","neighbors","getNeighbors","NodeClique","neighbor","ne1","ne2","edgeExists","isSuperset","slice","startClique","mark","sepSetId","filter","isMarked","walk","y","passSingleMessage"],"mappings":"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","file":"pptc.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst graph_1 = require(\"./graph\");\nclass InferenceController {\n    static apply(bbn) {\n        PotentialInitializer.init(bbn);\n        let ug = Moralizer.moralize(bbn);\n        let cliques = Triangulator.triangulate(ug);\n        let joinTree = Transformer.transform(cliques);\n        Initializer.initialize(joinTree);\n        Propagator.propagate(joinTree);\n        joinTree.setListener(new InferenceController());\n        return joinTree;\n    }\n    evidenceRetracted(jointree) {\n        Initializer.initialize(jointree);\n        Propagator.propagate(jointree);\n    }\n    evidenceUpdated(jointree) {\n        Propagator.propagate(jointree);\n    }\n}\nexports.InferenceController = InferenceController;\nclass Initializer {\n    static initialize(joinTree) {\n        joinTree.getCliques().forEach(clique => {\n            let potential = graph_1.PotentialUtil.getPotentialFromNodes(clique.nodes);\n            joinTree.addPotential(clique, potential);\n        });\n        joinTree.getSepSets().forEach(sepSet => {\n            let potential = graph_1.PotentialUtil.getPotentialFromNodes(sepSet.nodes);\n            joinTree.addPotential(sepSet, potential);\n        });\n        joinTree.getBbnNodes().forEach(node => {\n            let clique = this.getClique(node, joinTree);\n            // console.log(node.variable.name + ' mapped to clique ' + clique.toString());\n            let p1 = joinTree.potentials.get(clique.id);\n            let p2 = node.potential;\n            // console.log(p1.toString());\n            // console.log('>>>>');\n            // console.log(p2.toString());\n            // console.log('----');\n            graph_1.PotentialUtil.multiply(p1, p2);\n            // console.log(p1.toString());\n            // console.log('****');\n        });\n        joinTree.getBbnNodes().forEach(node => {\n            node.variable.values.forEach(value => {\n                let clique = node.metadata.get('parent.clique');\n                let cliquePotential = joinTree.potentials.get(clique.id);\n                let nodePotential = joinTree.getEvidence(node, value);\n                graph_1.PotentialUtil.multiply(cliquePotential, nodePotential);\n                // console.log(clique.toString());\n                // console.log(cliquePotential.toString());\n            });\n        });\n        return joinTree;\n    }\n    static getClique(node, jointree) {\n        let clique;\n        if (!node.metadata.has('parent.clique')) {\n            let cliques = jointree.findCliquesWithNodeAndParents(node.id)\n                .sort((a, b) => graph_1.CompareUtil.intCompare(a.id, b.id));\n            clique = cliques[0];\n        }\n        else {\n            clique = node.metadata.get('parent.clique');\n        }\n        node.addMetadata('parent.clique', clique);\n        return clique;\n    }\n}\nexports.Initializer = Initializer;\nclass Moralizer {\n    static moralize(dag) {\n        let ug = new graph_1.Ug();\n        dag.getNodes().forEach(node => ug.addNode(node));\n        dag.getEdges().forEach(edge => ug.addEdge(new graph_1.BEdge(edge.lhs, edge.rhs)));\n        dag.getNodes().forEach(node => {\n            let parents = Array.from(dag.getParents(node.id));\n            let size = parents.length;\n            for (let i = 0; i < size; i++) {\n                let pa1 = dag.getNode(parents[i]);\n                for (let j = i + 1; j < size; j++) {\n                    let pa2 = dag.getNode(parents[j]);\n                    ug.addEdge(new graph_1.BEdge(pa1, pa2));\n                }\n            }\n        });\n        dag.getNodes().forEach(node => {\n            let parents = Array.from(dag.getParents(node.id)).map(id => dag.getNode(id));\n            node.addMetadata('parents', parents);\n        });\n        return ug;\n    }\n}\nexports.Moralizer = Moralizer;\nclass PotentialInitializer {\n    static init(bbn) {\n        bbn.getNodes().forEach(node => {\n            let bbnNode = node;\n            let parents = Array.from(bbn.getParents(node.id)).map(id => bbn.getNode(id));\n            bbnNode.potential = graph_1.PotentialUtil.getPotential(bbnNode, parents);\n        });\n    }\n}\nexports.PotentialInitializer = PotentialInitializer;\nclass Propagator {\n    static propagate(joinTree) {\n        let cliques = joinTree.getCliques().sort((a, b) => graph_1.CompareUtil.intCompare(a.id, b.id));\n        let x = cliques[0];\n        // console.log(x.toString());\n        joinTree.unmarkCliques();\n        this.collectEvidence(joinTree, x);\n        joinTree.unmarkCliques();\n        this.distributeEvidence(joinTree, x);\n        return joinTree;\n    }\n    static collectEvidence(jointree, start) {\n        let collector = new EvidenceCollector(jointree, start);\n        collector.start();\n    }\n    static distributeEvidence(jointree, start) {\n        let distributor = new EvidenceDistributor(jointree, start);\n        distributor.start();\n    }\n}\nexports.Propagator = Propagator;\nclass Transformer {\n    static transform(cliques) {\n        let jointree = new graph_1.JoinTree();\n        cliques.forEach(c => jointree.addNode(c));\n        let sepSets = this.getSepSets(cliques);\n        sepSets.forEach(s => jointree.addEdge(new graph_1.JtEdge(s)));\n        return jointree;\n    }\n    static getSepSets(cliques) {\n        let sepSets = [];\n        let size = cliques.length;\n        for (let i = 0; i < size; i++) {\n            for (let j = i + 1; j < size; j++) {\n                const sepSet = new graph_1.SepSet(cliques[i], cliques[j]);\n                if (!sepSet.isEmpty()) {\n                    sepSets.push(sepSet);\n                }\n            }\n        }\n        return sepSets.sort((a, b) => {\n            let result = -1 * graph_1.CompareUtil.intCompare(a.getMass(), b.getMass());\n            if (0 === result) {\n                result = graph_1.CompareUtil.intCompare(a.getCost(), b.getCost());\n                if (0 === result) {\n                    result = graph_1.CompareUtil.intCompare(a.id, b.id);\n                }\n            }\n            return result;\n        });\n    }\n}\nexports.Transformer = Transformer;\nclass Triangulator {\n    static triangulate(m) {\n        let cliques = [];\n        let mm = this.duplicate(m);\n        while (mm.getNodes().length > 0) {\n            let nodeClique = this.selectNode(mm);\n            let clique = new graph_1.Clique(nodeClique.getBbnNodes());\n            if (!this.isSubset(cliques, clique)) {\n                cliques.push(clique);\n            }\n            mm.removeNode(nodeClique.node.id);\n            nodeClique.edges.forEach(e => {\n                m.addEdge(e);\n                mm.addEdge(e);\n            });\n        }\n        return cliques;\n    }\n    static duplicate(g) {\n        let ug = new graph_1.Ug();\n        g.getNodes().forEach(n => ug.addNode(n));\n        g.getEdges().forEach(e => ug.addEdge(e));\n        return ug;\n    }\n    static selectNode(m) {\n        let cliques = m.getNodes()\n            .map(node => {\n            let weight = this.getWeight(node, m);\n            let edges = this.getEdgesToAdd(node, m);\n            let neighbors = Array.from(m.getNeighbors(node.id)).map(id => m.getNode(id));\n            return new NodeClique(node, neighbors, weight, edges);\n        })\n            .sort((a, b) => {\n            let result = graph_1.CompareUtil.intCompare(a.edges.length, b.edges.length);\n            if (0 === result) {\n                result = graph_1.CompareUtil.intCompare(a.weight, b.weight);\n                if (0 === result) {\n                    result = graph_1.CompareUtil.intCompare(a.node.id, b.node.id);\n                }\n            }\n            return result;\n        });\n        return cliques[0];\n    }\n    static getWeight(n, m) {\n        let weight = n.getWeight();\n        Array.from(m.getNeighbors(n.id))\n            .map(id => m.getNode(id))\n            .forEach(neighbor => weight *= neighbor.getWeight());\n        return weight;\n    }\n    static getEdgesToAdd(n, m) {\n        let edges = [];\n        let neighbors = Array.from(m.getNeighbors(n.id)).map(id => m.getNode(id));\n        let size = neighbors.length;\n        for (let i = 0; i < size; i++) {\n            let ne1 = neighbors[i];\n            for (let j = 0; j < size; j++) {\n                let ne2 = neighbors[j];\n                if (!m.edgeExists(ne1.id, ne2.id)) {\n                    edges.push(new graph_1.BEdge(ne1, ne2));\n                }\n            }\n        }\n        return edges;\n    }\n    static isSubset(cliques, clique) {\n        for (let i = 0; i < cliques.length; i++) {\n            if (cliques[i].isSuperset(clique)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\nexports.Triangulator = Triangulator;\nclass NodeClique {\n    constructor(node, neighbors, weight, edges) {\n        this.node = node;\n        this.neighbors = neighbors;\n        this.weight = weight;\n        this.edges = edges;\n    }\n    getBbnNodes() {\n        let nodes = this.neighbors.slice(0);\n        nodes.push(this.node);\n        return nodes.map(n => n);\n    }\n}\nclass EvidenceCollector {\n    constructor(joinTree, startClique) {\n        this.joinTree = joinTree;\n        this.startClique = startClique;\n    }\n    start() {\n        // console.log('STARTING EVIDENCE COLLECTION from ' + this.startClique.toString());\n        this.startClique.mark();\n        this.joinTree.getNeighbors(this.startClique.id).forEach(sepSetId => {\n            let sepSet = this.joinTree.getNode(sepSetId);\n            Array.from(this.joinTree.getNeighbors(sepSetId))\n                .map(id => this.joinTree.getNode(id))\n                .filter(clique => !clique.isMarked())\n                .forEach(y => {\n                this.walk(this.startClique, sepSet, y);\n            });\n        });\n    }\n    walk(x, s, y) {\n        y.mark();\n        Array.from(this.joinTree.getNeighbors(y.id))\n            .map(id => this.joinTree.getNode(id))\n            .forEach(sepSet => {\n            Array.from(this.joinTree.getNeighbors(sepSet.id))\n                .map(id => this.joinTree.getNode(id))\n                .filter(clique => !clique.isMarked())\n                .forEach(clique => this.walk(y, sepSet, clique));\n        });\n        graph_1.PotentialUtil.passSingleMessage(this.joinTree, y, s, x);\n    }\n}\nexports.EvidenceCollector = EvidenceCollector;\nclass EvidenceDistributor {\n    constructor(joinTree, startClique) {\n        this.joinTree = joinTree;\n        this.startClique = startClique;\n    }\n    start() {\n        // console.log('STARTING EVIDENCE DISTRIBUTION from ' + this.startClique.toString());\n        this.startClique.mark();\n        this.joinTree.getNeighbors(this.startClique.id).forEach(sepSetId => {\n            let sepSet = this.joinTree.getNode(sepSetId);\n            Array.from(this.joinTree.getNeighbors(sepSetId))\n                .map(id => this.joinTree.getNode(id))\n                .filter(clique => !clique.isMarked())\n                .forEach(y => {\n                graph_1.PotentialUtil.passSingleMessage(this.joinTree, this.startClique, sepSet, y);\n                this.walk(this.startClique, sepSet, y);\n            });\n        });\n    }\n    walk(x, s, y) {\n        y.mark();\n        Array.from(this.joinTree.getNeighbors(y.id))\n            .map(id => this.joinTree.getNode(id))\n            .forEach(sepSet => {\n            Array.from(this.joinTree.getNeighbors(sepSet.id))\n                .map(id => this.joinTree.getNode(id))\n                .filter(clique => !clique.isMarked())\n                .forEach(clique => {\n                graph_1.PotentialUtil.passSingleMessage(this.joinTree, y, sepSet, clique);\n                this.walk(y, sepSet, clique);\n            });\n        });\n    }\n}\nexports.EvidenceDistributor = EvidenceDistributor;\n\n//# sourceMappingURL=pptc.js.map\n"]}