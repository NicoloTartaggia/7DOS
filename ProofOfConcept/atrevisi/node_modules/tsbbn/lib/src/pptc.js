"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var graph_1 = require("./graph");

var InferenceController = function () {
    function InferenceController() {
        _classCallCheck(this, InferenceController);
    }

    _createClass(InferenceController, [{
        key: "evidenceRetracted",
        value: function evidenceRetracted(jointree) {
            Initializer.initialize(jointree);
            Propagator.propagate(jointree);
        }
    }, {
        key: "evidenceUpdated",
        value: function evidenceUpdated(jointree) {
            Propagator.propagate(jointree);
        }
    }], [{
        key: "apply",
        value: function apply(bbn) {
            PotentialInitializer.init(bbn);
            var ug = Moralizer.moralize(bbn);
            var cliques = Triangulator.triangulate(ug);
            var joinTree = Transformer.transform(cliques);
            Initializer.initialize(joinTree);
            Propagator.propagate(joinTree);
            joinTree.setListener(new InferenceController());
            return joinTree;
        }
    }]);

    return InferenceController;
}();

exports.InferenceController = InferenceController;

var Initializer = function () {
    function Initializer() {
        _classCallCheck(this, Initializer);
    }

    _createClass(Initializer, null, [{
        key: "initialize",
        value: function initialize(joinTree) {
            var _this = this;

            joinTree.getCliques().forEach(function (clique) {
                var potential = graph_1.PotentialUtil.getPotentialFromNodes(clique.nodes);
                joinTree.addPotential(clique, potential);
            });
            joinTree.getSepSets().forEach(function (sepSet) {
                var potential = graph_1.PotentialUtil.getPotentialFromNodes(sepSet.nodes);
                joinTree.addPotential(sepSet, potential);
            });
            joinTree.getBbnNodes().forEach(function (node) {
                var clique = _this.getClique(node, joinTree);
                // console.log(node.variable.name + ' mapped to clique ' + clique.toString());
                var p1 = joinTree.potentials.get(clique.id);
                var p2 = node.potential;
                // console.log(p1.toString());
                // console.log('>>>>');
                // console.log(p2.toString());
                // console.log('----');
                graph_1.PotentialUtil.multiply(p1, p2);
                // console.log(p1.toString());
                // console.log('****');
            });
            joinTree.getBbnNodes().forEach(function (node) {
                node.variable.values.forEach(function (value) {
                    var clique = node.metadata.get('parent.clique');
                    var cliquePotential = joinTree.potentials.get(clique.id);
                    var nodePotential = joinTree.getEvidence(node, value);
                    graph_1.PotentialUtil.multiply(cliquePotential, nodePotential);
                    // console.log(clique.toString());
                    // console.log(cliquePotential.toString());
                });
            });
            return joinTree;
        }
    }, {
        key: "getClique",
        value: function getClique(node, jointree) {
            var clique = void 0;
            if (!node.metadata.has('parent.clique')) {
                var cliques = jointree.findCliquesWithNodeAndParents(node.id).sort(function (a, b) {
                    return graph_1.CompareUtil.intCompare(a.id, b.id);
                });
                clique = cliques[0];
            } else {
                clique = node.metadata.get('parent.clique');
            }
            node.addMetadata('parent.clique', clique);
            return clique;
        }
    }]);

    return Initializer;
}();

exports.Initializer = Initializer;

var Moralizer = function () {
    function Moralizer() {
        _classCallCheck(this, Moralizer);
    }

    _createClass(Moralizer, null, [{
        key: "moralize",
        value: function moralize(dag) {
            var ug = new graph_1.Ug();
            dag.getNodes().forEach(function (node) {
                return ug.addNode(node);
            });
            dag.getEdges().forEach(function (edge) {
                return ug.addEdge(new graph_1.BEdge(edge.lhs, edge.rhs));
            });
            dag.getNodes().forEach(function (node) {
                var parents = Array.from(dag.getParents(node.id));
                var size = parents.length;
                for (var i = 0; i < size; i++) {
                    var pa1 = dag.getNode(parents[i]);
                    for (var j = i + 1; j < size; j++) {
                        var pa2 = dag.getNode(parents[j]);
                        ug.addEdge(new graph_1.BEdge(pa1, pa2));
                    }
                }
            });
            dag.getNodes().forEach(function (node) {
                var parents = Array.from(dag.getParents(node.id)).map(function (id) {
                    return dag.getNode(id);
                });
                node.addMetadata('parents', parents);
            });
            return ug;
        }
    }]);

    return Moralizer;
}();

exports.Moralizer = Moralizer;

var PotentialInitializer = function () {
    function PotentialInitializer() {
        _classCallCheck(this, PotentialInitializer);
    }

    _createClass(PotentialInitializer, null, [{
        key: "init",
        value: function init(bbn) {
            bbn.getNodes().forEach(function (node) {
                var bbnNode = node;
                var parents = Array.from(bbn.getParents(node.id)).map(function (id) {
                    return bbn.getNode(id);
                });
                bbnNode.potential = graph_1.PotentialUtil.getPotential(bbnNode, parents);
            });
        }
    }]);

    return PotentialInitializer;
}();

exports.PotentialInitializer = PotentialInitializer;

var Propagator = function () {
    function Propagator() {
        _classCallCheck(this, Propagator);
    }

    _createClass(Propagator, null, [{
        key: "propagate",
        value: function propagate(joinTree) {
            var cliques = joinTree.getCliques().sort(function (a, b) {
                return graph_1.CompareUtil.intCompare(a.id, b.id);
            });
            var x = cliques[0];
            // console.log(x.toString());
            joinTree.unmarkCliques();
            this.collectEvidence(joinTree, x);
            joinTree.unmarkCliques();
            this.distributeEvidence(joinTree, x);
            return joinTree;
        }
    }, {
        key: "collectEvidence",
        value: function collectEvidence(jointree, start) {
            var collector = new EvidenceCollector(jointree, start);
            collector.start();
        }
    }, {
        key: "distributeEvidence",
        value: function distributeEvidence(jointree, start) {
            var distributor = new EvidenceDistributor(jointree, start);
            distributor.start();
        }
    }]);

    return Propagator;
}();

exports.Propagator = Propagator;

var Transformer = function () {
    function Transformer() {
        _classCallCheck(this, Transformer);
    }

    _createClass(Transformer, null, [{
        key: "transform",
        value: function transform(cliques) {
            var jointree = new graph_1.JoinTree();
            cliques.forEach(function (c) {
                return jointree.addNode(c);
            });
            var sepSets = this.getSepSets(cliques);
            sepSets.forEach(function (s) {
                return jointree.addEdge(new graph_1.JtEdge(s));
            });
            return jointree;
        }
    }, {
        key: "getSepSets",
        value: function getSepSets(cliques) {
            var sepSets = [];
            var size = cliques.length;
            for (var i = 0; i < size; i++) {
                for (var j = i + 1; j < size; j++) {
                    var sepSet = new graph_1.SepSet(cliques[i], cliques[j]);
                    if (!sepSet.isEmpty()) {
                        sepSets.push(sepSet);
                    }
                }
            }
            return sepSets.sort(function (a, b) {
                var result = -1 * graph_1.CompareUtil.intCompare(a.getMass(), b.getMass());
                if (0 === result) {
                    result = graph_1.CompareUtil.intCompare(a.getCost(), b.getCost());
                    if (0 === result) {
                        result = graph_1.CompareUtil.intCompare(a.id, b.id);
                    }
                }
                return result;
            });
        }
    }]);

    return Transformer;
}();

exports.Transformer = Transformer;

var Triangulator = function () {
    function Triangulator() {
        _classCallCheck(this, Triangulator);
    }

    _createClass(Triangulator, null, [{
        key: "triangulate",
        value: function triangulate(m) {
            var cliques = [];
            var mm = this.duplicate(m);
            while (mm.getNodes().length > 0) {
                var nodeClique = this.selectNode(mm);
                var clique = new graph_1.Clique(nodeClique.getBbnNodes());
                if (!this.isSubset(cliques, clique)) {
                    cliques.push(clique);
                }
                mm.removeNode(nodeClique.node.id);
                nodeClique.edges.forEach(function (e) {
                    m.addEdge(e);
                    mm.addEdge(e);
                });
            }
            return cliques;
        }
    }, {
        key: "duplicate",
        value: function duplicate(g) {
            var ug = new graph_1.Ug();
            g.getNodes().forEach(function (n) {
                return ug.addNode(n);
            });
            g.getEdges().forEach(function (e) {
                return ug.addEdge(e);
            });
            return ug;
        }
    }, {
        key: "selectNode",
        value: function selectNode(m) {
            var _this2 = this;

            var cliques = m.getNodes().map(function (node) {
                var weight = _this2.getWeight(node, m);
                var edges = _this2.getEdgesToAdd(node, m);
                var neighbors = Array.from(m.getNeighbors(node.id)).map(function (id) {
                    return m.getNode(id);
                });
                return new NodeClique(node, neighbors, weight, edges);
            }).sort(function (a, b) {
                var result = graph_1.CompareUtil.intCompare(a.edges.length, b.edges.length);
                if (0 === result) {
                    result = graph_1.CompareUtil.intCompare(a.weight, b.weight);
                    if (0 === result) {
                        result = graph_1.CompareUtil.intCompare(a.node.id, b.node.id);
                    }
                }
                return result;
            });
            return cliques[0];
        }
    }, {
        key: "getWeight",
        value: function getWeight(n, m) {
            var weight = n.getWeight();
            Array.from(m.getNeighbors(n.id)).map(function (id) {
                return m.getNode(id);
            }).forEach(function (neighbor) {
                return weight *= neighbor.getWeight();
            });
            return weight;
        }
    }, {
        key: "getEdgesToAdd",
        value: function getEdgesToAdd(n, m) {
            var edges = [];
            var neighbors = Array.from(m.getNeighbors(n.id)).map(function (id) {
                return m.getNode(id);
            });
            var size = neighbors.length;
            for (var i = 0; i < size; i++) {
                var ne1 = neighbors[i];
                for (var j = 0; j < size; j++) {
                    var ne2 = neighbors[j];
                    if (!m.edgeExists(ne1.id, ne2.id)) {
                        edges.push(new graph_1.BEdge(ne1, ne2));
                    }
                }
            }
            return edges;
        }
    }, {
        key: "isSubset",
        value: function isSubset(cliques, clique) {
            for (var i = 0; i < cliques.length; i++) {
                if (cliques[i].isSuperset(clique)) {
                    return true;
                }
            }
            return false;
        }
    }]);

    return Triangulator;
}();

exports.Triangulator = Triangulator;

var NodeClique = function () {
    function NodeClique(node, neighbors, weight, edges) {
        _classCallCheck(this, NodeClique);

        this.node = node;
        this.neighbors = neighbors;
        this.weight = weight;
        this.edges = edges;
    }

    _createClass(NodeClique, [{
        key: "getBbnNodes",
        value: function getBbnNodes() {
            var nodes = this.neighbors.slice(0);
            nodes.push(this.node);
            return nodes.map(function (n) {
                return n;
            });
        }
    }]);

    return NodeClique;
}();

var EvidenceCollector = function () {
    function EvidenceCollector(joinTree, startClique) {
        _classCallCheck(this, EvidenceCollector);

        this.joinTree = joinTree;
        this.startClique = startClique;
    }

    _createClass(EvidenceCollector, [{
        key: "start",
        value: function start() {
            var _this3 = this;

            // console.log('STARTING EVIDENCE COLLECTION from ' + this.startClique.toString());
            this.startClique.mark();
            this.joinTree.getNeighbors(this.startClique.id).forEach(function (sepSetId) {
                var sepSet = _this3.joinTree.getNode(sepSetId);
                Array.from(_this3.joinTree.getNeighbors(sepSetId)).map(function (id) {
                    return _this3.joinTree.getNode(id);
                }).filter(function (clique) {
                    return !clique.isMarked();
                }).forEach(function (y) {
                    _this3.walk(_this3.startClique, sepSet, y);
                });
            });
        }
    }, {
        key: "walk",
        value: function walk(x, s, y) {
            var _this4 = this;

            y.mark();
            Array.from(this.joinTree.getNeighbors(y.id)).map(function (id) {
                return _this4.joinTree.getNode(id);
            }).forEach(function (sepSet) {
                Array.from(_this4.joinTree.getNeighbors(sepSet.id)).map(function (id) {
                    return _this4.joinTree.getNode(id);
                }).filter(function (clique) {
                    return !clique.isMarked();
                }).forEach(function (clique) {
                    return _this4.walk(y, sepSet, clique);
                });
            });
            graph_1.PotentialUtil.passSingleMessage(this.joinTree, y, s, x);
        }
    }]);

    return EvidenceCollector;
}();

exports.EvidenceCollector = EvidenceCollector;

var EvidenceDistributor = function () {
    function EvidenceDistributor(joinTree, startClique) {
        _classCallCheck(this, EvidenceDistributor);

        this.joinTree = joinTree;
        this.startClique = startClique;
    }

    _createClass(EvidenceDistributor, [{
        key: "start",
        value: function start() {
            var _this5 = this;

            // console.log('STARTING EVIDENCE DISTRIBUTION from ' + this.startClique.toString());
            this.startClique.mark();
            this.joinTree.getNeighbors(this.startClique.id).forEach(function (sepSetId) {
                var sepSet = _this5.joinTree.getNode(sepSetId);
                Array.from(_this5.joinTree.getNeighbors(sepSetId)).map(function (id) {
                    return _this5.joinTree.getNode(id);
                }).filter(function (clique) {
                    return !clique.isMarked();
                }).forEach(function (y) {
                    graph_1.PotentialUtil.passSingleMessage(_this5.joinTree, _this5.startClique, sepSet, y);
                    _this5.walk(_this5.startClique, sepSet, y);
                });
            });
        }
    }, {
        key: "walk",
        value: function walk(x, s, y) {
            var _this6 = this;

            y.mark();
            Array.from(this.joinTree.getNeighbors(y.id)).map(function (id) {
                return _this6.joinTree.getNode(id);
            }).forEach(function (sepSet) {
                Array.from(_this6.joinTree.getNeighbors(sepSet.id)).map(function (id) {
                    return _this6.joinTree.getNode(id);
                }).filter(function (clique) {
                    return !clique.isMarked();
                }).forEach(function (clique) {
                    graph_1.PotentialUtil.passSingleMessage(_this6.joinTree, y, sepSet, clique);
                    _this6.walk(y, sepSet, clique);
                });
            });
        }
    }]);

    return EvidenceDistributor;
}();

exports.EvidenceDistributor = EvidenceDistributor;

//# sourceMappingURL=pptc.js.map
//# sourceMappingURL=pptc.js.map
