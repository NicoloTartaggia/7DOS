{"version":3,"sources":["viz.js"],"names":["Object","defineProperty","exports","value","d3","require","OUT_LEFT","OUT_TOP","OUT_RIGHT","OUT_BOTTOM","MAX_NODE_NAME_LENGTH","MAX_VALUE_LENGTH","MAX_PCT_VALUE","DEFAULT_PADDING","VGraph","nodes","Map","edges","Array","from","values","node","set","id","edge","getId","get","id1","id2","getNode","getPath","VEdge","parent","child","points","Util","hashOfStr","toString","label","VNode","probs","width","normalizeProbs","height","length","point","VPoint","Math","random","x","y","dx","dy","sum","reduce","a","b","map","p","that","theta","getTheta","p1","getPoint","p2","PI","error","path","VPath","join","c","getMid","cx","cy","w","h","d","getDistance","cos","sin","ocode","getOutCode","px","py","sqrt","out","atan2","s","hash","i","len","chr","charCodeAt","arr","sort","NoOpInferenceEngine","graph","RenderOptions","GraphRenderer","engine","options","getGraph","initSvg","layoutGraph","drawEdges","drawNodes","select","attr","append","markerWidth","markerHeight","refX","refY","orient","markerUnits","fill","class","g","dagre","graphlib","Graph","setGraph","setDefaultEdgeLabel","getNodes","forEach","setNode","n","getRefId","getEdges","setEdge","e","getDagreGraph","layout","dagreNode","updatePoint","dagreEdge","v","selectAll","data","enter","each","x1","y1","x2","y2","style","formatNodeName","formatPct","formatValue","leftPad","rightPad","transform","getTranslation","on","text","attributes","updateEvidence","getProbs","j","selector","prob","index","xInc","drag","behavior","origin","event","sourceEvent","stopPropagation","d3Event","mouseEvent","arcs","call","pad","threhold","str","ostr","substr","padding","toFixed"],"mappings":"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","file":"viz.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst d3 = require(\"d3\");\nconst OUT_LEFT = 1, OUT_TOP = 2, OUT_RIGHT = 4, OUT_BOTTOM = 8;\nconst MAX_NODE_NAME_LENGTH = 15;\nconst MAX_VALUE_LENGTH = 5;\nconst MAX_PCT_VALUE = 6;\nconst DEFAULT_PADDING = '\\u00A0';\nclass VGraph {\n    constructor() {\n        this.nodes = new Map();\n        this.edges = new Map();\n    }\n    getNodes() {\n        return Array.from(this.nodes.values());\n    }\n    getEdges() {\n        return Array.from(this.edges.values());\n    }\n    addNode(node) {\n        this.nodes.set(node.id, node);\n        return this;\n    }\n    addEdge(edge) {\n        this.edges.set(edge.getId(), edge);\n        return this;\n    }\n    getNode(id) {\n        return this.nodes.get(id);\n    }\n    getPath(id1, id2) {\n        return this.getNode(id1).getPath(this.getNode(id2));\n    }\n}\nexports.VGraph = VGraph;\nclass VEdge {\n    constructor(parent, child) {\n        this.parent = parent;\n        this.child = child;\n        this.points = [];\n    }\n    getId() {\n        return Util.hashOfStr(this.toString());\n    }\n    toString() {\n        return this.parent.label + '->' + this.child.label;\n    }\n}\nexports.VEdge = VEdge;\nclass VNode {\n    constructor(id, label, values, probs) {\n        this.id = id;\n        this.label = label;\n        this.values = values;\n        this.probs = probs;\n        this.width = 150;\n        this.probs = this.normalizeProbs(this.probs);\n        this.height = values.length * 15 + 20;\n        this.point = new VPoint(Math.random(), Math.random());\n    }\n    updatePoint(point) {\n        this.point.x = point.x;\n        this.point.y = point.y;\n    }\n    getRefId() {\n        return this.label;\n    }\n    getTranslation() {\n        return 'translate(' + this.point.x + ',' + this.point.y + ')';\n    }\n    getMid() {\n        let dx = this.width / 2.0 + this.point.x;\n        let dy = this.height / 2.0 + this.point.y;\n        return new VPoint(dx, dy);\n    }\n    normalizeProbs(probs) {\n        let sum = probs.reduce((a, b) => a + b);\n        return probs.map(p => p / sum);\n    }\n    getPath(that) {\n        let theta = that.point.getTheta(this.point);\n        let p1 = this.getPoint(theta);\n        let p2 = that.getPoint(theta + Math.PI);\n        let error = p1.error || p2.error ? true : false;\n        let path = new VPath(p1, p2);\n        path.error = error;\n        return path;\n    }\n    toString() {\n        return this.id + '|' +\n            this.label + '|' +\n            this.values.join(',') + '|' +\n            this.probs.join(',') + '|' +\n            this.point.toString();\n    }\n    getPoint(theta) {\n        let c = this.getMid();\n        let cx = c.x;\n        let cy = c.y;\n        let w = this.width / 2.0;\n        let h = this.height / 2.0;\n        let d = this.getDistance(new VPoint(cx, cy), new VPoint(cx + w, cy + h));\n        let x = cx + d * Math.cos(theta);\n        let y = cy + d * Math.sin(theta);\n        let ocode = this.getOutCode(new VPoint(x, y));\n        let px = 0;\n        let py = 0;\n        let error = false;\n        switch (ocode) {\n            case OUT_TOP:\n                px = cx - h * ((x - cx) / (y - cy));\n                py = cy - h;\n                break;\n            case OUT_LEFT:\n                px = cx - w;\n                py = cy - w * ((y - cy) / (x - cx));\n                break;\n            case OUT_BOTTOM:\n                px = cx + h * ((x - cx) / (y - cy));\n                py = cy + h;\n                break;\n            case OUT_RIGHT:\n                px = cx + w;\n                py = cy + w * ((y - cy) / (x - cx));\n                break;\n            default:\n                error = true;\n        }\n        let p = new VPoint(px, py);\n        p.error = error;\n        return p;\n    }\n    getDistance(p1, p2) {\n        let x = p1.x - p2.x;\n        let y = p1.y - p2.y;\n        let d = Math.sqrt((x * x) + (y * y));\n        return d;\n    }\n    getOutCode(point) {\n        let out = 0;\n        if (this.width <= 0) {\n            out |= OUT_LEFT | OUT_RIGHT;\n        }\n        else if (point.x < this.point.x) {\n            out |= OUT_LEFT;\n        }\n        else if (point.x > this.point.x + this.width) {\n            out |= OUT_RIGHT;\n        }\n        if (this.height <= 0) {\n            out |= OUT_TOP | OUT_BOTTOM;\n        }\n        else if (point.y < this.point.y) {\n            out |= OUT_TOP;\n        }\n        else if (point.y > this.point.y + this.height) {\n            out |= OUT_BOTTOM;\n        }\n        return out;\n    }\n}\nexports.VNode = VNode;\nclass VPoint {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n        this.error = false;\n    }\n    toString() {\n        return '(' + this.x + ',' + this.y + ')';\n    }\n    getTheta(that) {\n        return Math.atan2(this.y - that.y, this.x - that.x);\n    }\n}\nexports.VPoint = VPoint;\nclass VPath {\n    constructor(p1, p2) {\n        this.p1 = p1;\n        this.p2 = p2;\n        this.error = false;\n    }\n    toString() {\n        return this.p1.toString() + ' to ' + this.p2.toString();\n    }\n}\nexports.VPath = VPath;\nclass Util {\n    static hashOfStr(s) {\n        let hash = 0;\n        if (s.length === 0) {\n            return hash;\n        }\n        for (let i = 0, len = s.length; i < len; i++) {\n            let chr = s.charCodeAt(i);\n            hash = ((hash << 5) - hash) + chr;\n            hash |= 0; // Convert to 32bit integer\n        }\n        return hash;\n    }\n    static hashOfArr(arr) {\n        return this.hashOfStr(arr.sort().join('-'));\n    }\n}\nexports.Util = Util;\nclass NoOpInferenceEngine {\n    constructor(graph) {\n        this.graph = graph;\n    }\n    getGraph() {\n        return this.graph;\n    }\n    updateEvidence(id, value) {\n    }\n    getProbs(id) {\n        return this.graph.getNode(id).probs;\n    }\n}\nexports.NoOpInferenceEngine = NoOpInferenceEngine;\nclass RenderOptions {\n    constructor(id, width, height) {\n        this.id = id;\n        this.width = width;\n        this.height = height;\n    }\n}\nexports.RenderOptions = RenderOptions;\nclass GraphRenderer {\n    constructor(engine, options) {\n        this.engine = engine;\n        this.options = options;\n        this.graph = this.engine.getGraph();\n    }\n    draw() {\n        this.initSvg();\n        this.layoutGraph();\n        this.drawEdges();\n        this.drawNodes();\n    }\n    initSvg() {\n        d3.select(this.options.id)\n            .attr({\n            width: this.options.width,\n            height: this.options.height\n        })\n            .append('defs')\n            .append('marker')\n            .attr({\n            id: 'arrow',\n            markerWidth: 10,\n            markerHeight: 10,\n            refX: 5,\n            refY: 3,\n            orient: 'auto',\n            markerUnits: 'strokeWidth'\n        })\n            .append('path')\n            .attr({\n            d: 'M0,0 L0,6, L5,3 z',\n            fill: '#f00',\n            class: 'edge-head'\n        });\n    }\n    getDagreGraph() {\n        let g = new dagre.graphlib.Graph();\n        g.setGraph({});\n        g.setDefaultEdgeLabel(() => {\n            return {};\n        });\n        this.graph.getNodes()\n            .forEach(n => {\n            g.setNode(n.getRefId(), {\n                label: n.getRefId(),\n                width: n.width,\n                height: n.height\n            });\n        });\n        this.graph.getEdges()\n            .forEach(e => {\n            g.setEdge(e.parent.getRefId(), e.child.getRefId());\n        });\n        return g;\n    }\n    layoutGraph() {\n        let g = this.getDagreGraph();\n        dagre.layout(g);\n        this.graph.getNodes()\n            .forEach(n => {\n            let dagreNode = g.node(n.getRefId());\n            if (dagreNode) {\n                n.updatePoint(new VPoint(dagreNode.x, dagreNode.y));\n            }\n        });\n        this.graph.getEdges()\n            .forEach(e => {\n            let dagreEdge = g.edge({ v: e.parent.getRefId(), w: e.child.getRefId() });\n            if (dagreEdge) {\n                e.points = Array.from(dagreEdge.points)\n                    .map(point => {\n                    let p = point;\n                    return new VPoint(p.x, p.y);\n                });\n            }\n        });\n    }\n    drawEdges() {\n        let graph = this.graph;\n        let edges = d3.select(this.options.id)\n            .selectAll('line')\n            .data(graph.getEdges())\n            .enter()\n            .append('line')\n            .each(function (d) {\n            let path = graph.getPath(d.parent.id, d.child.id);\n            d3.select(this).attr({\n                'data-parent': d.parent.getRefId(),\n                'data-child': d.child.getRefId(),\n                x1: path.p1.x,\n                y1: path.p1.y,\n                x2: path.p2.x,\n                y2: path.p2.y,\n                style: 'stroke:rgb(255,0,0);stroke-width:2',\n                class: 'edge-line',\n                'marker-end': 'url(#arrow)'\n            });\n        });\n    }\n    drawNodes() {\n        let engine = this.engine;\n        let graph = this.graph;\n        let formatNodeName = this.formatNodeName;\n        let formatPct = this.formatPct;\n        let formatValue = this.formatValue;\n        let leftPad = this.leftPad;\n        let rightPad = this.rightPad;\n        // set the node group\n        let nodes = d3.select(this.options.id)\n            .selectAll('g')\n            .data(graph.getNodes())\n            .enter()\n            .append('g')\n            .attr({\n            id: function (d) {\n                return d.getRefId();\n            },\n            transform: function (d) {\n                return d.getTranslation();\n            },\n            class: 'node-group'\n        })\n            .on('mousedown', function (d) {\n            d3.selectAll('g.node-group').sort((a, b) => {\n                if (a.id !== d.id) {\n                    return -1;\n                }\n                else {\n                    return 1;\n                }\n            });\n        });\n        // draw the node rectangle\n        nodes.append('rect')\n            .attr({\n            x: 0,\n            y: 0,\n            class: 'node-shape',\n            style: 'stroke:#000000; fill:none;',\n            width: function (d) {\n                return d.width;\n            },\n            height: function (d) {\n                return d.height;\n            },\n            'pointer-events': 'visible',\n            'data-node': function (d) {\n                return d.getRefId();\n            }\n        });\n        // draw the node's name/label\n        nodes.append('text')\n            .attr({\n            x: function (d) {\n                return d.width / 2;\n            },\n            y: 15,\n            fill: 'black',\n            class: 'node-name',\n            'font-family': 'monospace',\n            'font-size': 15\n        })\n            .text(function (d) {\n            return formatNodeName(d.label);\n        })\n            .style('text-anchor', 'middle');\n        // draw the node's value labels\n        nodes.each(function (d) {\n            let y = 30;\n            d.values.forEach(value => {\n                d3.select(this)\n                    .append('text')\n                    .attr({\n                    x: 2,\n                    y: y,\n                    class: 'node-value',\n                    'font-family': 'monospace',\n                    'data-node': function (d) {\n                        return d.getRefId();\n                    },\n                    'data-value': function (d) {\n                        return value;\n                    }\n                })\n                    .on('click', function (e) {\n                    let node = e;\n                    let h = this;\n                    let v = h.attributes['data-value'].value;\n                    engine.updateEvidence(node.id, v);\n                    graph.getNodes().forEach(node => node.probs = engine.getProbs(node.id));\n                    graph.getNodes().forEach(node => {\n                        node.values.forEach((value, j) => {\n                            // update belief bars\n                            let selector = 'rect[data-node=\"' + node.getRefId() + '\"][data-value=\"' + value + '\"]';\n                            d3.select(selector).attr({ width: node.probs[j] * 100 });\n                            // update probability texts\n                            selector = 'text[data-node=\"' + node.getRefId() + '\"][data-pvalue=\"' + value + '\"]';\n                            d3.select(selector).text(formatPct(node.probs[j], leftPad));\n                        });\n                    });\n                })\n                    .text(function (d) {\n                    return formatValue(value, leftPad);\n                });\n                y += 15;\n            });\n        });\n        // draw the node's percentage text\n        nodes.each(function (d) {\n            let y = 30;\n            for (let i = 0; i < d.probs.length; i++) {\n                d3.select(this)\n                    .append('text')\n                    .attr({\n                    x: 2 + d.width,\n                    y: y,\n                    'font-family': 'monospace',\n                    class: 'node-pct',\n                    'data-node': function (d) {\n                        return d.getRefId();\n                    },\n                    'data-pvalue': function (d) {\n                        return d.values[i];\n                    }\n                })\n                    .text(function (d) {\n                    return formatPct(d.probs[i], leftPad);\n                });\n                y += 15;\n            }\n        });\n        // draw the node's belief bars\n        nodes.each(function (d) {\n            let y = 20;\n            d.probs.forEach((prob, index) => {\n                d3.select(this)\n                    .append('rect')\n                    .attr({\n                    x: 50,\n                    y: y,\n                    width: prob * 100,\n                    height: 10,\n                    class: 'node-bar',\n                    'data-node': function (d) {\n                        return d.getRefId();\n                    },\n                    'data-value': function (d) {\n                        return d.values[index];\n                    }\n                });\n                y += 15;\n            });\n        });\n        // draw the node's interquartile lines\n        nodes.each(function (d) {\n            let y1 = 20;\n            let y2 = d.height - 5;\n            let width = d.width - 50;\n            let xInc = width / 4.0;\n            let x = 50 + xInc;\n            for (let i = 0; i < 3; i++) {\n                d3.select(this)\n                    .append('line')\n                    .attr({\n                    x1: x,\n                    y1: y1,\n                    x2: x,\n                    y2: y2,\n                    class: 'node-iqline',\n                    'stroke-dasharray': '5, 1',\n                    style: 'stroke:black; stroke-width:1px',\n                });\n                x += xInc;\n            }\n        });\n        // set the dragging behavior\n        let drag = d3.behavior.drag()\n            .origin((d, i) => {\n            let node = d;\n            return node.point;\n        })\n            .on('dragstart', (d, i) => {\n            let e = d3.event;\n            e.sourceEvent.stopPropagation();\n        })\n            .on('drag', (d, i) => {\n            let event = d3.event;\n            let d3Event = d3.event;\n            let mouseEvent = d3Event.sourceEvent;\n            let node = d;\n            node.point.x = event.x;\n            node.point.y = event.y;\n            let id = 'g#' + node.getRefId();\n            d3.select(id).attr({\n                transform: node.getTranslation()\n            });\n            let arcs = 'line[data-parent=' + node.getRefId() + ']';\n            d3.selectAll(arcs)\n                .each(function (d) {\n                let edge = d;\n                let path = graph.getPath(edge.parent.id, edge.child.id);\n                d3.select(this).attr({\n                    x1: path.p1.x,\n                    y1: path.p1.y,\n                    x2: path.p2.x,\n                    y2: path.p2.y\n                });\n            });\n            arcs = 'line[data-child=' + node.getRefId() + ']';\n            d3.selectAll(arcs)\n                .each(function (d) {\n                let edge = d;\n                let path = graph.getPath(edge.parent.id, edge.child.id);\n                d3.select(this).attr({\n                    x1: path.p1.x,\n                    y1: path.p1.y,\n                    x2: path.p2.x,\n                    y2: path.p2.y\n                });\n            });\n        });\n        nodes.call(drag);\n    }\n    leftPad(pad, threhold, str) {\n        let ostr = str;\n        if (ostr.length < threhold) {\n            while (ostr.length < threhold) {\n                ostr = pad + ostr;\n            }\n            return ostr;\n        }\n        return ostr;\n    }\n    rightPad(pad, threhold, str) {\n        let ostr = str;\n        if (ostr.length < threhold) {\n            while (ostr.length < threhold) {\n                ostr += pad;\n            }\n            return ostr;\n        }\n        return ostr;\n    }\n    formatNodeName(v) {\n        return v.length > MAX_NODE_NAME_LENGTH ? v.substr(0, MAX_NODE_NAME_LENGTH) : v;\n    }\n    formatValue(v, padding) {\n        let value = v.length > MAX_VALUE_LENGTH ? v.substr(0, MAX_VALUE_LENGTH) : v;\n        return padding(DEFAULT_PADDING, MAX_VALUE_LENGTH, value);\n    }\n    formatPct(p, padding) {\n        return padding(DEFAULT_PADDING, MAX_PCT_VALUE, (p * 100).toFixed(2));\n    }\n}\nexports.GraphRenderer = GraphRenderer;\n\n//# sourceMappingURL=viz.js.map\n"]}