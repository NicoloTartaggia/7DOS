{"version":3,"sources":["graph.js"],"names":["Object","defineProperty","exports","value","Variable","id","name","_values","values","BGraph","nodes","Map","edges","keys","Array","from","neighbors1","filter","get","key","has","neighbors2","neighbors","concat","Set","map","stream","lhsId","edgeType","EdgeType","UNDIRECTED","leftId","rightId","rhsId","DIRECTED","Math","min","BEdge","BNode","removeDuplicates","flatten","node","set","edge","lhs","rhs","addNode","shouldAdd","left","right","type","add","id1","id2","delete","forEach","v","k","list","i","length","j","push","arr","e","toString","metadata","val","BbnNode","variable","probs","s","join","Clique","IdUtil","hashOfArr","n","_marked","ids","indexOf","that","s1","s2","s3","size","weight","getWeight","result","find","SepSet","sort","a","b","CompareUtil","strCompare","set2","set1","arrow","JtEdge","sepSet","Dag","parents","parent","child","DagPathDetector","exists","Bbn","graph","start","stop","seen","children","getChildren","Pdag","getParents","subset","getNeighbors","item","PdagPathDetector","outNodes","getOutNodes","outNode","Ug","JoinTree","potentials","evidences","clique","PotentialUtil","normalize","marginalizeFor","getCliques","unmark","bbnNodes","getBbnNodes","contains","bbnNode","getBbnNode","potential","getNodes","jtEdge","listener","potentialEntry","PotentialEntry","Potential","addEntry","getUnobservedEvidence","updateEvidences","unobserve","validate","change","getChangeType","evidence","entries","notifyListener","EvidenceType","OBSERVATION","pvalues","entry","p","cvalues","lastValue","currValue","JoinTreePathDetector","changes","compare","count","ChangeType","RETRACTION","c","UPDATE","NONE","Evidence","UNOBSERVE","addValue","evidenceRetracted","evidenceUpdated","neighbor","EvidenceBuilder","likelihood","convert","unobserveThat","isUnobserved","unobserveThis","observeThat","isObserved","observeThis","getObservedValue","VIRTUAL","sum","reduce","d","FINDING","intCompare","m","counts","countOne","countZero","strs","matches","substr","hash","len","chr","charCodeAt","hashOfStr","jointree","x","y","oldSepSetPotential","yPotential","newSepSetPotential","addPotential","multiply","divide","joinTree","getPotentialFromNodes","cliquePotential","matchedEntries","getMatchingEntries","t","matchedEntry","numerator","denominator","isZero","newEntry","duplicate","bigger","smaller","merge","total","prob","valueLists","cartesian","getCartesianProduct","lists","results","first","tail","slice","splice","remaining","condition","rlist","r","BbnUtil","f","g","h","bbn","addEdge","localeCompare"],"mappings":"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","file":"graph.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass Variable {\n    constructor(id, name, _values) {\n        this.id = id;\n        this.name = name;\n        this._values = _values;\n        this.values = [..._values];\n    }\n}\nexports.Variable = Variable;\nclass BGraph {\n    constructor() {\n        this.nodes = new Map();\n        this.edges = new Map();\n    }\n    getNeighbors(id) {\n        let keys = Array.from(this.edges.keys());\n        let neighbors1 = keys.filter(key => this.edges.get(key).has(id));\n        let neighbors2 = this.edges.has(id) ? Array.from(this.edges.get(id).values()) : [];\n        let neighbors = neighbors1.concat(neighbors2);\n        return new Set(neighbors);\n    }\n    getNode(id) {\n        return this.nodes.get(id);\n    }\n    getNodes() {\n        return Array.from(this.nodes.keys()).map(id => this.nodes.get(id));\n    }\n    getEdges() {\n        let keys = Array.from(this.edges.keys());\n        let stream = keys.map(lhsId => {\n            let edges = Array.from(this.edges.get(lhsId))\n                .map(rhsId => {\n                let edgeType = EdgeType.UNDIRECTED;\n                let leftId = lhsId;\n                let rightId = rhsId;\n                if (!this.edges.get(rhsId).has(lhsId)) {\n                    edgeType = EdgeType.DIRECTED;\n                }\n                else {\n                    leftId = Math.min(lhsId, rhsId);\n                    rightId = leftId === lhsId ? rhsId : lhsId;\n                }\n                return new BEdge(new BNode(leftId), new BNode(rightId), edgeType);\n            });\n            return edges;\n        });\n        return this.removeDuplicates(this.flatten(stream));\n    }\n    addNode(node) {\n        if (!this.nodes.has(node.id)) {\n            this.nodes.set(node.id, node);\n        }\n        if (!this.edges.has(node.id)) {\n            this.edges.set(node.id, new Set());\n        }\n        return this;\n    }\n    addEdge(edge) {\n        let lhs = edge.lhs;\n        let rhs = edge.rhs;\n        this.addNode(lhs);\n        this.addNode(rhs);\n        if (this.shouldAdd(edge)) {\n            let left = lhs.id;\n            let right = rhs.id;\n            if (EdgeType.UNDIRECTED === edge.type) {\n                this.edges.get(left).add(right);\n                this.edges.get(right).add(left);\n            }\n            else {\n                this.edges.get(left).add(right);\n            }\n        }\n        return this;\n    }\n    edgeExists(id1, id2) {\n        if (this.edges.has(id1) && this.edges.get(id1).has(id2)) {\n            return true;\n        }\n        if (this.edges.has(id2) && this.edges.get(id2).has(id1)) {\n            return true;\n        }\n        return false;\n    }\n    removeNode(id) {\n        this.nodes.delete(id);\n        this.edges.delete(id);\n        this.edges.forEach((v, k) => v.delete(id));\n    }\n    shouldAdd(edge) {\n        let lhs = edge.lhs;\n        let rhs = edge.rhs;\n        if (lhs.id === rhs.id) {\n            return false;\n        }\n        if (!this.edges.get(lhs.id).has(rhs.id)) {\n            if (!this.edges.get(rhs.id).has(lhs.id)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    flatten(edges) {\n        let list = [];\n        for (let i = 0; i < edges.length; i++) {\n            for (let j = 0; j < edges[i].length; j++) {\n                list.push(edges[i][j]);\n            }\n        }\n        return list;\n    }\n    removeDuplicates(edges) {\n        let map = new Map();\n        let arr = [];\n        edges.forEach(e => {\n            let key = e.toString();\n            if (!map.has(key)) {\n                map.set(key, e);\n                arr.push(e);\n            }\n        });\n        return arr;\n    }\n}\nexports.BGraph = BGraph;\nclass BNode {\n    constructor(id) {\n        this.id = id;\n        this.metadata = new Map();\n    }\n    addMetadata(key, val) {\n        this.metadata.set(key, val);\n        return this;\n    }\n}\nexports.BNode = BNode;\nclass BbnNode extends BNode {\n    constructor(variable, probs = []) {\n        super(variable.id);\n        this.variable = variable;\n        this.probs = probs;\n    }\n    getWeight() {\n        return this.variable.values.length;\n    }\n    toString() {\n        let s = this.variable.name + ' {';\n        s += this.variable.values.join(',');\n        s += '}';\n        return s;\n    }\n}\nexports.BbnNode = BbnNode;\nclass Clique extends BNode {\n    constructor(nodes) {\n        super(IdUtil.hashOfArr(nodes.map(n => '' + n.id)));\n        this.nodes = nodes;\n        this._marked = false;\n    }\n    isMarked() {\n        return this._marked;\n    }\n    mark() {\n        this._marked = true;\n    }\n    unmark() {\n        this._marked = false;\n    }\n    nodesMinus(nodes) {\n        let ids = this.nodes.map(n => n.id);\n        return nodes.filter(n => ids.indexOf(n.id) === -1);\n    }\n    isSuperset(that) {\n        let s1 = this.nodes.map(n => n.id);\n        let s2 = new Set(that.nodes.map(n => n.id));\n        let s3 = new Set(s1.filter(id => s2.has(id)));\n        if (s2.size === s3.size) {\n            // console.log(this.toString() + ' is superset of ' + that.toString());\n            return true;\n        }\n        // console.log(this.toString() + ' is NOT superset of ' + that.toString());\n        return false;\n    }\n    getWeight() {\n        let weight = 1;\n        this.nodes.forEach(n => {\n            weight = weight * n.getWeight();\n        });\n        return weight;\n    }\n    contains(id) {\n        let result = this.nodes.find(n => n.id === id);\n        if (result) {\n            return true;\n        }\n        return false;\n    }\n    getSepSet(that) {\n        return new SepSet(this, that);\n    }\n    toString() {\n        return '(' +\n            this.nodes\n                .map(n => n.variable.name)\n                .sort((a, b) => CompareUtil.strCompare(a, b))\n                .join('-') +\n            ')';\n    }\n}\nexports.Clique = Clique;\nclass SepSet extends Clique {\n    constructor(left, right) {\n        super([]);\n        this.left = left;\n        this.right = right;\n        let set2 = new Set(left.nodes.map(n => n.id));\n        let set1 = new Set(right.nodes.filter(n => set2.has(n.id)).map(n => n.id));\n        this.nodes = left.nodes.filter(n => set1.has(n.id));\n        this.id = IdUtil.hashOfArr(this.nodes.map(n => '' + n.id));\n    }\n    isEmpty() {\n        return (this.nodes.length == 0) ? true : false;\n    }\n    getCost() {\n        return this.left.getWeight() + this.right.getWeight();\n    }\n    getMass() {\n        return this.nodes.length;\n    }\n    toString() {\n        return '[' +\n            this.nodes\n                .map(n => n.variable.name)\n                .sort((a, b) => CompareUtil.strCompare(a, b))\n                .join('-') +\n            ']';\n    }\n}\nexports.SepSet = SepSet;\nclass BEdge {\n    constructor(lhs, rhs, type = EdgeType.UNDIRECTED) {\n        this.lhs = lhs;\n        this.rhs = rhs;\n        this.type = type;\n    }\n    toString() {\n        let arrow = EdgeType.UNDIRECTED === this.type ? '--' : '->';\n        let left = this.lhs.id;\n        let right = this.rhs.id;\n        if (EdgeType.UNDIRECTED === this.type) {\n            left = Math.min(this.lhs.id, this.rhs.id);\n            right = (this.lhs.id === left) ? this.rhs.id : this.lhs.id;\n        }\n        return left + arrow + right;\n    }\n}\nexports.BEdge = BEdge;\nclass JtEdge extends BEdge {\n    constructor(sepSet) {\n        super(sepSet.left, sepSet.right, EdgeType.UNDIRECTED);\n        this.sepSet = sepSet;\n    }\n    toString() {\n        return this.sepSet.left.toString() + '--' +\n            this.sepSet.toString() + '--' +\n            this.sepSet.right.toString();\n    }\n}\nexports.JtEdge = JtEdge;\nvar EdgeType;\n(function (EdgeType) {\n    EdgeType[EdgeType[\"UNDIRECTED\"] = 1] = \"UNDIRECTED\";\n    EdgeType[EdgeType[\"DIRECTED\"] = 2] = \"DIRECTED\";\n})(EdgeType = exports.EdgeType || (exports.EdgeType = {}));\nclass Dag extends BGraph {\n    constructor() {\n        super();\n    }\n    getParents(id) {\n        let keys = Array.from(this.edges.keys());\n        let parents = keys.filter(key => this.edges.get(key).has(id));\n        return new Set(parents);\n    }\n    getChildren(id) {\n        return this.edges.get(id);\n    }\n    edgeExists(id1, id2) {\n        if (this.edges.has(id1) && this.edges.get(id1).has(id2)) {\n            return true;\n        }\n        return false;\n    }\n    shouldAdd(edge) {\n        let parent = edge.lhs;\n        let child = edge.rhs;\n        if (parent.id === child.id) {\n            return false;\n        }\n        if (!this.edges.get(parent.id).has(child.id)) {\n            if (!this.edges.get(child.id).has(parent.id)) {\n                if (!(new DagPathDetector(this, child.id, parent.id)).exists()) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\nexports.Dag = Dag;\nclass Bbn extends Dag {\n    shouldAdd(edge) {\n        if (!(edge.lhs instanceof BbnNode) || !(edge.rhs instanceof BbnNode)) {\n            return false;\n        }\n        return super.shouldAdd(edge);\n    }\n}\nexports.Bbn = Bbn;\nclass DagPathDetector {\n    constructor(graph, start, stop) {\n        this.seen = new Set();\n        this.graph = graph;\n        this.start = start;\n        this.stop = stop;\n    }\n    exists() {\n        if (this.start === this.stop) {\n            return true;\n        }\n        return this.find(this.start);\n    }\n    find(id) {\n        let children = this.graph.getChildren(id);\n        if (children.has(this.stop)) {\n            return true;\n        }\n        else {\n            this.seen.add(id);\n            for (let child of children) {\n                if (!this.seen.has(child) && this.find(child)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\nclass Pdag extends BGraph {\n    getParents(id) {\n        let parents = Array.from(this.edges.keys())\n            .filter(key => this.edges.get(key).has(id) && !this.edges.get(id).has(key));\n        return new Set(parents);\n    }\n    getOutNodes(id) {\n        let parents = this.getParents(id);\n        let subset = Array.from(this.getNeighbors(id)).filter(item => !parents.has(item));\n        return new Set(subset);\n    }\n    shouldAdd(edge) {\n        let parent = edge.lhs;\n        let child = edge.rhs;\n        if (parent.id === child.id) {\n            return false;\n        }\n        if (!this.edges.get(parent.id).has(child.id)) {\n            if (!this.edges.get(child.id).has(parent.id)) {\n                if (!(new PdagPathDetector(this, child.id, parent.id)).exists()) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\nexports.Pdag = Pdag;\nclass PdagPathDetector {\n    constructor(graph, start, stop) {\n        this.seen = new Set();\n        this.graph = graph;\n        this.start = start;\n        this.stop = stop;\n    }\n    exists() {\n        if (this.start === this.stop) {\n            return true;\n        }\n        return this.find(this.start);\n    }\n    find(id) {\n        let outNodes = this.graph.getOutNodes(id);\n        if (outNodes.has(this.stop)) {\n            return true;\n        }\n        else {\n            this.seen.add(id);\n            for (let outNode of outNodes) {\n                if (!this.seen.has(outNode)) {\n                    if (this.find(outNode)) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\nclass Ug extends BGraph {\n    constructor() {\n        super();\n    }\n}\nexports.Ug = Ug;\nclass JoinTree extends Ug {\n    constructor() {\n        super();\n        this.potentials = new Map();\n        this.evidences = new Map();\n    }\n    getBbnPotential(node) {\n        let clique = node.metadata.get('parent.clique');\n        return PotentialUtil.normalize(PotentialUtil.marginalizeFor(this, clique, [node]));\n    }\n    unmarkCliques() {\n        this.getCliques().forEach(clique => clique.unmark());\n    }\n    getBbnNodes() {\n        let nodes = new Map();\n        this.getCliques().forEach(clique => {\n            clique.nodes.forEach(node => nodes.set(node.id, node));\n        });\n        let bbnNodes = [];\n        nodes.forEach((v, k) => bbnNodes.push(v));\n        return bbnNodes;\n    }\n    getBbnNode(id) {\n        let bbnNodes = this.getBbnNodes();\n        for (let i = 0; i < bbnNodes.length; i++) {\n            if (id === bbnNodes[i].id) {\n                return bbnNodes[i];\n            }\n        }\n        return new BbnNode(new Variable(-1, '_dummy_', new Set()));\n    }\n    getBbnNodeByName(name) {\n        return this.getBbnNodes().filter(n => n.variable.name === name)[0];\n    }\n    findCliquesWithNodeAndParents(id) {\n        return this.getCliques()\n            .filter(clique => {\n            if (!(clique.contains(id))) {\n                return false;\n            }\n            let bbnNode = this.getBbnNode(id);\n            if (bbnNode.metadata.has('parents')) {\n                let parents = bbnNode.metadata.get('parents');\n                for (let i = 0; i < parents.length; i++) {\n                    let parent = parents[i];\n                    if (!(clique.contains(parent.id))) {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        });\n    }\n    addPotential(clique, potential) {\n        this.potentials.set(clique.id, potential);\n        return this;\n    }\n    getCliques() {\n        return this.getNodes()\n            .filter(n => !(n instanceof SepSet))\n            .map(n => n);\n    }\n    getSepSets() {\n        return this.getNodes()\n            .filter(n => (n instanceof SepSet))\n            .map(n => n);\n    }\n    addEdge(edge) {\n        if (!(edge instanceof JtEdge)) {\n            return this;\n        }\n        let jtEdge = edge;\n        let sepSet = jtEdge.sepSet;\n        let lhs = jtEdge.lhs;\n        let rhs = jtEdge.rhs;\n        if (this.shouldAdd(edge)) {\n            this.addNode(sepSet);\n            this.addNode(lhs);\n            this.addNode(rhs);\n            this.edges.get(lhs.id).add(sepSet.id);\n            this.edges.get(sepSet.id).add(lhs.id);\n            this.edges.get(rhs.id).add(sepSet.id);\n            this.edges.get(sepSet.id).add(rhs.id);\n        }\n        return this;\n    }\n    setListener(listener) {\n        this.listener = listener;\n    }\n    getEvidence(node, value) {\n        if (!this.evidences.has(node.id)) {\n            this.evidences.set(node.id, new Map());\n        }\n        if (!this.evidences.get(node.id).has(value)) {\n            let potentialEntry = new PotentialEntry();\n            potentialEntry.add(node.id, value);\n            potentialEntry.value = 1.0;\n            let potential = new Potential();\n            potential.addEntry(potentialEntry);\n            this.evidences.get(node.id).set(value, potential);\n        }\n        return this.evidences.get(node.id).get(value);\n    }\n    unobserve(nodes) {\n        let evidences = nodes.map(n => this.getUnobservedEvidence(n));\n        this.updateEvidences(evidences);\n        return this;\n    }\n    unobserveAll() {\n        this.unobserve(this.getBbnNodes());\n        return this;\n    }\n    updateEvidences(evidences) {\n        evidences.forEach(e => e.validate());\n        let change = this.getChangeType(evidences);\n        evidences.forEach(evidence => {\n            let node = evidence.node;\n            let potentials = this.evidences.get(node.id);\n            evidence.values.forEach((v, k) => {\n                let potential = potentials.get(k);\n                potential.entries[0].value = v;\n            });\n        });\n        this.notifyListener(change);\n        return this;\n    }\n    setObservation(evidence) {\n        // only deal with observation types in this method\n        if (EvidenceType.OBSERVATION !== evidence.type) {\n            // console.log('evidence not observation type returning');\n            return this;\n        }\n        // check to see if previous evidence was also observation\n        // evidence that is observation type always has only one value that is 1\n        let potentials = this.evidences.get(evidence.node.id);\n        let pvalues = Array.from(potentials.keys())\n            .filter(v => {\n            let potential = potentials.get(v);\n            let entry = potential.entries[0];\n            let p = entry.value;\n            if (p === 1.0) {\n                return true;\n            }\n            return false;\n        });\n        let cvalues = Array.from(evidence.values.keys())\n            .filter(v => 1.0 === evidence.values.get(v));\n        if (1 === pvalues.length) {\n            // previous evidence was of type observation\n            // both current and previous evidences are observation type\n            // console.log('both previous and current evidences are of type observation');\n            let lastValue = pvalues[0];\n            let currValue = cvalues[0];\n            if (lastValue === currValue) {\n                // if the last value is equal to the current value, unobserve it\n                // console.log(lastValue + ' equals ' + currValue + ' so will unobserve');\n                this.unobserve([evidence.node]);\n            }\n            else {\n                // console.log(lastValue + ' NOT equals ' + currValue + ' so will update evidence');\n                this.updateEvidences([evidence]);\n            }\n        }\n        else {\n            // console.log('number previous values === 1 was ' + pvalues.length + ' so will update evidence');\n            this.updateEvidences([evidence]);\n        }\n        return this;\n    }\n    shouldAdd(edge) {\n        let jtEdge = edge;\n        let sepSet = jtEdge.sepSet;\n        let lhs = jtEdge.lhs;\n        let rhs = jtEdge.rhs;\n        if (lhs.id === rhs.id) {\n            // console.log('false: ' + jtEdge.toString());\n            return false;\n        }\n        if (!(new JoinTreePathDetector(this, lhs.id, rhs.id)).exists()) {\n            // console.log('true: ' +  jtEdge.toString());\n            return true;\n        }\n        // console.log('false: ' + jtEdge.toString());\n        return false;\n    }\n    getChangeType(evidences) {\n        let changes = evidences.map(evidence => {\n            let node = evidence.node;\n            let potentials = this.evidences.get(node.id);\n            let change = evidence.compare(potentials);\n            return change;\n        });\n        let count = changes.filter(c => ChangeType.RETRACTION === c).length;\n        if (count > 0) {\n            return ChangeType.RETRACTION;\n        }\n        count = changes.filter(c => ChangeType.UPDATE === c).length;\n        if (count > 0) {\n            return ChangeType.UPDATE;\n        }\n        return ChangeType.NONE;\n    }\n    getUnobservedEvidence(node) {\n        let evidence = new Evidence(node, EvidenceType.UNOBSERVE);\n        node.variable.values.forEach(v => evidence.addValue(v, 1.0));\n        return evidence;\n    }\n    notifyListener(change) {\n        if (this.listener) {\n            if (ChangeType.RETRACTION === change) {\n                this.listener.evidenceRetracted(this);\n            }\n            else if (ChangeType.UPDATE === change) {\n                this.listener.evidenceUpdated(this);\n            }\n        }\n    }\n}\nexports.JoinTree = JoinTree;\nclass JoinTreePathDetector {\n    constructor(graph, start, stop) {\n        this.seen = new Set();\n        this.graph = graph;\n        this.start = start;\n        this.stop = stop;\n    }\n    exists() {\n        if (this.start === this.stop) {\n            return true;\n        }\n        return this.find(this.start);\n    }\n    find(id) {\n        let neighbors = this.graph.getNeighbors(id);\n        if (neighbors.has(this.stop)) {\n            return true;\n        }\n        else {\n            this.seen.add(id);\n            for (let neighbor of neighbors) {\n                if (!this.seen.has(neighbor)) {\n                    if (this.find(neighbor)) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\nvar EvidenceType;\n(function (EvidenceType) {\n    EvidenceType[EvidenceType[\"VIRTUAL\"] = 1] = \"VIRTUAL\";\n    EvidenceType[EvidenceType[\"FINDING\"] = 2] = \"FINDING\";\n    EvidenceType[EvidenceType[\"OBSERVATION\"] = 3] = \"OBSERVATION\";\n    EvidenceType[EvidenceType[\"UNOBSERVE\"] = 4] = \"UNOBSERVE\";\n})(EvidenceType = exports.EvidenceType || (exports.EvidenceType = {}));\nvar ChangeType;\n(function (ChangeType) {\n    ChangeType[ChangeType[\"NONE\"] = 1] = \"NONE\";\n    ChangeType[ChangeType[\"UPDATE\"] = 2] = \"UPDATE\";\n    ChangeType[ChangeType[\"RETRACTION\"] = 3] = \"RETRACTION\";\n})(ChangeType = exports.ChangeType || (exports.ChangeType = {}));\nclass EvidenceBuilder {\n    constructor() {\n        this.values = new Map();\n        this.type = EvidenceType.OBSERVATION;\n    }\n    withNode(node) {\n        this.node = node;\n        return this;\n    }\n    withType(type) {\n        this.type = type;\n        return this;\n    }\n    withEvidence(val, likelihood) {\n        this.values.set(val, likelihood);\n        return this;\n    }\n    build() {\n        let evidence = new Evidence(this.node, this.type);\n        this.values.forEach((v, k) => evidence.values.set(k, v));\n        return evidence;\n    }\n}\nexports.EvidenceBuilder = EvidenceBuilder;\nclass Evidence {\n    constructor(node, type) {\n        this.node = node;\n        this.type = type;\n        this.values = new Map();\n    }\n    addValue(value, likelihood) {\n        this.values.set(value, likelihood);\n        return this;\n    }\n    compare(potentials) {\n        let that = this.convert(potentials);\n        let unobserveThat = this.isUnobserved(that);\n        let unobserveThis = this.isUnobserved(this.values);\n        if (unobserveThat && unobserveThis) {\n            return ChangeType.NONE;\n        }\n        let observeThat = this.isObserved(that);\n        let observeThis = this.isObserved(this.values);\n        if (observeThat && observeThis) {\n            let s1 = this.getObservedValue(that);\n            let s2 = this.getObservedValue(this.values);\n            if (s1 === s2) {\n                return ChangeType.NONE;\n            }\n            else {\n                return ChangeType.RETRACTION;\n            }\n        }\n        return ChangeType.RETRACTION;\n    }\n    validate() {\n        this.node.variable.values.forEach(value => {\n            if (!this.values.has(value)) {\n                this.values.set(value, 0.0);\n            }\n        });\n        if (EvidenceType.VIRTUAL === this.type) {\n            let sum = this.node.variable.values\n                .map(value => this.values.get(value))\n                .reduce((a, b) => a + b);\n            this.node.variable.values.forEach(value => {\n                let d = this.values.get(value) / sum;\n                this.values.set(value, d);\n            });\n        }\n        else if (EvidenceType.FINDING === this.type) {\n            this.node.variable.values.forEach(value => {\n                let d = this.values.get(value) > 0.0 ? 1.0 : 0.0;\n                this.values.set(value, d);\n            });\n            let count = this.node.variable.values\n                .map(value => this.values.get(value))\n                .reduce((a, b) => a + b);\n            if (0 === count) {\n                this.node.variable.values.forEach(value => this.values.set(value, 1.0));\n            }\n        }\n        else if (EvidenceType.OBSERVATION === this.type) {\n            let keys = Array.from(this.values.keys())\n                .sort((a, b) => -1 * CompareUtil.intCompare(this.values.get(a), this.values.get(b)));\n            let key = keys[0];\n            this.node.variable.values.forEach(value => {\n                if (key === value) {\n                    this.values.set(value, 1.0);\n                }\n                else {\n                    this.values.set(value, 0.0);\n                }\n            });\n        }\n        else if (EvidenceType.UNOBSERVE === this.type) {\n            this.node.variable.values.forEach(value => this.values.set(value, 1.0));\n        }\n    }\n    convert(map) {\n        let m = new Map();\n        map.forEach((v, k) => {\n            let likelihood = v.entries[0].value;\n            m.set(k, likelihood);\n        });\n        return m;\n    }\n    isUnobserved(values) {\n        let counts = 0;\n        values.forEach((v, k) => counts += v);\n        return (counts === values.size);\n    }\n    isObserved(values) {\n        let countOne = 0;\n        let countZero = 0;\n        values.forEach((v, k) => {\n            if (1.0 === v) {\n                countOne++;\n            }\n            else if (0.0 === v) {\n                countZero++;\n            }\n        });\n        return (1 === countOne && values.size - 1 === countZero);\n    }\n    getObservedValue(values) {\n        let strs = Array.from(values.keys())\n            .filter(k => (1.0 === values.get(k)));\n        return strs[0];\n    }\n}\nexports.Evidence = Evidence;\nclass Potential {\n    constructor() {\n        this.entries = [];\n    }\n    addEntry(entry) {\n        this.entries.push(entry);\n    }\n    getMatchingEntries(entry) {\n        return this.entries.filter(e => e.matches(entry));\n    }\n    toString() {\n        let s = '';\n        this.entries.forEach(entry => s += entry.toString() + '\\n');\n        return s.substr(0, s.length - 1);\n    }\n}\nexports.Potential = Potential;\nclass PotentialEntry {\n    constructor() {\n        this.entries = new Map();\n        this.value = 1.0;\n    }\n    add(id, value) {\n        if (!this.entries.has(id)) {\n            this.entries.set(id, value);\n        }\n        return this;\n    }\n    matches(that) {\n        for (let key of that.entries.keys()) {\n            if (!this.entries.has(key) || !(this.entries.get(key) === that.entries.get(key))) {\n                return false;\n            }\n        }\n        return true;\n    }\n    toString() {\n        let s = '';\n        this.entries.forEach((v, k) => {\n            s += k + '=' + v + ',';\n        });\n        s += this.value;\n        return s;\n    }\n    duplicate() {\n        let entry = new PotentialEntry();\n        this.entries.forEach((v, k) => entry.add(k, v));\n        entry.value = this.value;\n        return entry;\n    }\n}\nexports.PotentialEntry = PotentialEntry;\nclass IdUtil {\n    static hashOfStr(s) {\n        let hash = 0;\n        if (s.length === 0) {\n            return hash;\n        }\n        for (let i = 0, len = s.length; i < len; i++) {\n            let chr = s.charCodeAt(i);\n            hash = ((hash << 5) - hash) + chr;\n            hash |= 0; // Convert to 32bit integer\n        }\n        return hash;\n    }\n    static hashOfArr(arr) {\n        return this.hashOfStr(arr.sort().join('-'));\n    }\n}\nexports.IdUtil = IdUtil;\nclass PotentialUtil {\n    static passSingleMessage(jointree, x, s, y) {\n        // console.log('passing message ' + x.toString() + ' -- ' + s.toString() + ' -- ' + y.toString());\n        let oldSepSetPotential = jointree.potentials.get(s.id);\n        let yPotential = jointree.potentials.get(y.id);\n        let newSepSetPotential = this.marginalizeFor(jointree, x, s.nodes);\n        jointree.addPotential(s, newSepSetPotential);\n        this.multiply(yPotential, this.divide(newSepSetPotential, oldSepSetPotential));\n    }\n    static marginalizeFor(joinTree, clique, nodes) {\n        let potential = this.getPotentialFromNodes(nodes);\n        let cliquePotential = joinTree.potentials.get(clique.id);\n        potential.entries.forEach(entry => {\n            let matchedEntries = cliquePotential.getMatchingEntries(entry);\n            let t = 0.0;\n            matchedEntries.forEach(matchedEntry => t += matchedEntry.value);\n            entry.value = t;\n        });\n        return potential;\n    }\n    static normalize(potential) {\n        let sum = 0.0;\n        potential.entries.forEach(entry => {\n            sum += entry.value;\n        });\n        potential.entries.forEach(entry => {\n            let d = entry.value / sum;\n            entry.value = d;\n        });\n        return potential;\n    }\n    static divide(numerator, denominator) {\n        let potential = new Potential();\n        numerator.entries.forEach(entry => {\n            let entries = denominator.entries;\n            if (entries.length > 0) {\n                let e = entries[0];\n                let d = (this.isZero(entry.value) || this.isZero(e.value)) ? 0.0 : entry.value / e.value;\n                let newEntry = entry.duplicate();\n                newEntry.value = d;\n                potential.addEntry(newEntry);\n            }\n        });\n        return potential;\n    }\n    static multiply(bigger, smaller) {\n        smaller.entries.forEach(entry => {\n            let entries = bigger.getMatchingEntries(entry);\n            entries.forEach(e => {\n                let d = e.value * entry.value;\n                e.value = d;\n            });\n        });\n    }\n    static getPotential(node, parents) {\n        let potential = this.getPotentialFromNodes(this.merge(node, parents));\n        let total = potential.entries.length;\n        for (let i = 0; i < total; i++) {\n            let prob = node.probs[i];\n            potential.entries[i].value = prob;\n        }\n        return potential;\n    }\n    static getPotentialFromNodes(nodes) {\n        let valueLists = nodes.map(n => n.variable.values);\n        let cartesian = this.getCartesianProduct(valueLists);\n        let potential = new Potential();\n        cartesian.forEach(values => {\n            let entry = new PotentialEntry();\n            for (let i = 0; i < nodes.length; i++) {\n                let value = values[i];\n                let id = nodes[i].id;\n                entry.add(id, value);\n            }\n            potential.addEntry(entry);\n        });\n        return potential;\n    }\n    static isZero(d) {\n        return (0 === d);\n    }\n    static getCartesianProduct(lists) {\n        let results = [];\n        if (lists.length === 0) {\n            return results;\n        }\n        else {\n            let first = lists[0];\n            let tail = lists.slice(0).splice(1);\n            let remaining = this.getCartesianProduct(tail);\n            first.forEach(condition => {\n                if (remaining.length > 0) {\n                    remaining.forEach(rlist => {\n                        let result = [];\n                        result.push(condition);\n                        rlist.forEach(r => result.push(r));\n                        results.push(result);\n                    });\n                }\n                else {\n                    let result = [];\n                    result.push(condition);\n                    results.push(result);\n                }\n            });\n        }\n        return results;\n    }\n    static merge(node, parents) {\n        let nodes = [];\n        parents.forEach(n => nodes.push(n));\n        nodes.push(node);\n        return nodes;\n    }\n}\nexports.PotentialUtil = PotentialUtil;\nclass BbnUtil {\n    static getHuangGraph() {\n        let a = new BbnNode(new Variable(0, 'a', new Set(['on', 'off'])), [0.5, 0.5]);\n        let b = new BbnNode(new Variable(1, 'b', new Set(['on', 'off'])), [0.5, 0.5, 0.4, 0.6]);\n        let c = new BbnNode(new Variable(2, 'c', new Set(['on', 'off'])), [0.7, 0.3, 0.2, 0.8]);\n        let d = new BbnNode(new Variable(3, 'd', new Set(['on', 'off'])), [0.9, 0.1, 0.5, 0.5]);\n        let e = new BbnNode(new Variable(4, 'e', new Set(['on', 'off'])), [0.3, 0.7, 0.6, 0.4]);\n        let f = new BbnNode(new Variable(5, 'f', new Set(['on', 'off'])), [0.01, 0.99, 0.01, 0.99, 0.01, 0.99, 0.99, 0.01]);\n        let g = new BbnNode(new Variable(6, 'g', new Set(['on', 'off'])), [0.8, 0.2, 0.1, 0.9]);\n        let h = new BbnNode(new Variable(7, 'h', new Set(['on', 'off'])), [0.05, 0.95, 0.95, 0.05, 0.95, 0.05, 0.95, 0.05]);\n        let bbn = new Bbn()\n            .addNode(a)\n            .addNode(b)\n            .addNode(c)\n            .addNode(d)\n            .addNode(e)\n            .addNode(f)\n            .addNode(g)\n            .addNode(h)\n            .addEdge(new BEdge(a, b, EdgeType.DIRECTED))\n            .addEdge(new BEdge(a, c, EdgeType.DIRECTED))\n            .addEdge(new BEdge(b, d, EdgeType.DIRECTED))\n            .addEdge(new BEdge(c, e, EdgeType.DIRECTED))\n            .addEdge(new BEdge(d, f, EdgeType.DIRECTED))\n            .addEdge(new BEdge(e, f, EdgeType.DIRECTED))\n            .addEdge(new BEdge(c, g, EdgeType.DIRECTED))\n            .addEdge(new BEdge(e, h, EdgeType.DIRECTED))\n            .addEdge(new BEdge(g, h, EdgeType.DIRECTED));\n        return bbn;\n    }\n}\nexports.BbnUtil = BbnUtil;\nclass CompareUtil {\n    static intCompare(x, y) {\n        return (x < y) ? -1 : ((x === y) ? 0 : 1);\n    }\n    static strCompare(x, y) {\n        return x.localeCompare(y);\n    }\n}\nexports.CompareUtil = CompareUtil;\n\n//# sourceMappingURL=graph.js.map\n"]}